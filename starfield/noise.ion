
var perlin_gradients: float2[];
const PerlinGradientCountRoot = 16;
const PerlinGradientCount = PerlinGradientCountRoot*PerlinGradientCountRoot;
#static_assert((PerlinGradientCount & (PerlinGradientCount - 1)) == 0)
func perlin_gradient(p: int2): float2 {
    result := float2 {};

    if (perlin_gradients == 0) {
        for (i := 0; i < PerlinGradientCount; i++) {
            apush(perlin_gradients, random_unit_vector2());
        }
    }

    // See worley_square_index regarding hash
    result = perlin_gradients[bad_hash_int2_u32(p) & (PerlinGradientCount -1)];
    return result;
}

func perlin(p: float2, grid_size: float): float {
    p.x = (p.x + grid_size*0.137) * grid_size;
    p.y = (p.y + grid_size*0.137) * grid_size;

    a := float2_to_int2(p);
    b := float2_to_int2(add2(p, {1, 0}));
    c := float2_to_int2(add2(p, {0, 1}));
    d := float2_to_int2(add2(p, {1, 1}));

    A := perlin_gradient(a);
    B := perlin_gradient(b);
    C := perlin_gradient(c);
    D := perlin_gradient(d);

    pp: float2 = { p.x - int(p.x), p.y - int(p.y) };

    u00 := dot2(A, sub2(pp, {0,0}));
    u10 := dot2(B, sub2(pp, {1,0}));
    u01 := dot2(C, sub2(pp, {0,1}));
    u11 := dot2(D, sub2(pp, {1,1}));

    x := pp.x*pp.x*(3. - 2.*pp.x);
    y := pp.y*pp.y*(3. - 2.*pp.y);

    ab := lerp(u00, u10, x);
    cd := lerp(u01, u11, x);
    abcd := lerp(ab, cd, y);

    return abcd;
}

func perlin_octaves(p: float2, grid_size: float): float {
   return (1 / (.5+.25+.125+.0625)) *
      perlin(p, grid_size) * 0.5
    + perlin(mul2s(p, 1.5), grid_size) * 0.25
    + perlin(mul2s(p, 3.), grid_size) * 0.125
    + perlin(mul2s(p, 4.2), grid_size) * 0.0625;
}

const WorleyMaxPointsPerSquare = 4;

struct WorleySquare {
    count: int;
    points: float2[WorleyMaxPointsPerSquare];
}

var worley_squares: WorleySquare[];
const WorleySquareCountRoot = 8;
const WorleySquareCount = WorleySquareCountRoot*WorleySquareCountRoot;
const UseWorleySSE = true;
#static_assert(WorleySquareCount & (WorleySquareCount - 1) == 0)
func init_worley_squares() {
    if (UseWorleySSE) {
        if (worley_squares16 == 0) {
            alpha := exp(-2.01);

            worley_squares16 = alloc(WorleySquareCount*sizeof(WorleySquare16), alignof(short8));

            for (i := 0; i < WorleySquareCount; i++) {
                w := WorleySquare16 {};
                count := clampi(1, WorleyMaxPointsPerSquare, random_poisson(alpha));
                for (j := 0; j < count; j++) {
                    v := random();
                    w.points[j] = { (:short)((v >> 16) & (WorleyPrecision - 1)), (:short)(v & (WorleyPrecision - 1)) };
                }
                for (j := count; j < 4; j++) {
                    w.points[j] = { SHORT_MAX, SHORT_MAX };
                }
                worley_squares16[i] = w;
            }
        }
    } else {
        if (worley_squares == 0) {
            alpha := exp(-2.01);
            for (i := 0; i < WorleySquareCount; i++) {
                w := WorleySquare {};
                w.count = clampi(1, WorleyMaxPointsPerSquare, random_poisson(alpha));

                for (j := 0; j < w.count; j++) {
                    w.points[j] = { random01(), random01() };
                }
                apush(worley_squares, w);
            }
        }
    }
}

func worley_square_index(p: int2): ssize {
    // This hash is bad enough that my processor can predict the subsequent load
    // perfectly but good enough that the noise looks fine up to way higher
    // frequencies than we need it for!!
    base := bad_hash_int2_u32(p);
    result := base & (WorleySquareCount - 1);
    return result;
}

func worley_scalar(p01: float2, grid_size: float): float2 {
    #assert(worley_squares);

    p := mul2s(p01, grid_size);
    pi := floor2(p);

    // Conceptually p01 lies in the unit square subdivided into
    // WorleySquareCount squares, but it make sense to extend the domain and let
    // wrapping select some square. In order to work with points negative in
    // some dimension we need to shift the location of pi to the top left of the
    // box, not the closest-to-zero point (with x, y down).
    if (p01.x < 0) {
        pi.x -= 1;
    }
    if (p01.y < 0) {
        pi.y -= 1;
    }

    pf := sub2(p, pi);

    f1 := 2*Sqrt2;
    f2 := f1;

    // yes, this is faster than a loop

    {
        w := worley_squares + worley_square_index({ int(pi.x), int(pi.y) });

        for (m := 0; m < w.count; m++) {
            d := distance_squared2(pf, w.points[m]);
            if (d < f1) {
                f2 = f1;
                f1 = d;
            } else if (d < f2) {
                f2 = d;
            }
        }

        // Early out. This is 5%~ of cases
        min_dist := square(min(min(pf.x, 1 - pf.x), min(pf.y, 1 - pf.y)));
        if (f2 < min_dist) {
            return { sqrt(f1), sqrt(f2) };
        }
    }

    {
        i := -1.;
        j := 0.;
        face_dist := square(pf.x);

        if (face_dist < f2) {
            p_ij := add2(pi, { i, j });
            w := worley_squares + worley_square_index({ int(p_ij.x), int(p_ij.y) });

            for (m := 0; m < w.count; m++) {
                d := distance_squared2(p, add2(p_ij, w.points[m]));
                if (d < f1) {
                    f2 = f1;
                    f1 = d;
                } else if (d < f2) {
                    f2 = d;
                }
            }
        }
    }

    {
        i := 1.;
        j := 0.;
        face_dist := square(1. - pf.x);

        if (face_dist < f2) {
            p_ij := add2(pi, { i, j });
            w := worley_squares + worley_square_index({ int(p_ij.x), int(p_ij.y) });

            for (m := 0; m < w.count; m++) {
                d := distance_squared2(p, add2(p_ij, w.points[m]));
                if (d < f1) {
                    f2 = f1;
                    f1 = d;
                } else if (d < f2) {
                    f2 = d;
                }
            }
        }
    }

    {
        i := 0.;
        j := -1.;
        face_dist := square(pf.y);

        if (face_dist < f2) {
            p_ij := add2(pi, { i, j });
            w := worley_squares + worley_square_index({ int(p_ij.x), int(p_ij.y) });

            for (m := 0; m < w.count; m++) {
                d := distance_squared2(p, add2(p_ij, w.points[m]));
                if (d < f1) {
                    f2 = f1;
                    f1 = d;
                } else if (d < f2) {
                    f2 = d;
                }
            }
        }
    }

    {
        i := 0.;
        j := 1.;
        face_dist := square(1. - pf.y);

        if (face_dist < f2) {
            p_ij := add2(pi, { i, j });
            w := worley_squares + worley_square_index({ int(p_ij.x), int(p_ij.y) });

            for (m := 0; m < w.count; m++) {
                d := distance_squared2(p, add2(p_ij, w.points[m]));
                if (d < f1) {
                    f2 = f1;
                    f1 = d;
                } else if (d < f2) {
                    f2 = d;
                }
            }
        }
    }

    {
        i := -1.;
        j := -1.;
        face_dist := magnitude_squared2({ pf.x, pf.y });

        if (face_dist < f2) {
            p_ij := add2(pi, { i, j });
            w := worley_squares + worley_square_index({ int(p_ij.x), int(p_ij.y) });

            for (m := 0; m < w.count; m++) {
                d := distance_squared2(p, add2(p_ij, w.points[m]));
                if (d < f1) {
                    f2 = f1;
                    f1 = d;
                } else if (d < f2) {
                    f2 = d;
                }
            }
        }
    }


    {
        i := 1.;
        j := -1.;
        face_dist := magnitude_squared2({ 1. - pf.x, pf.y });

        if (face_dist < f2) {
            p_ij := add2(pi, { i, j });
            w := worley_squares + worley_square_index({ int(p_ij.x), int(p_ij.y) });

            for (m := 0; m < w.count; m++) {
                d := distance_squared2(p, add2(p_ij, w.points[m]));
                if (d < f1) {
                    f2 = f1;
                    f1 = d;
                } else if (d < f2) {
                    f2 = d;
                }
            }
        }
    }

    {
        i := -1.;
        j := 1.;
        face_dist := magnitude_squared2({ pf.x, 1. - pf.y });

        if (face_dist < f2) {
            p_ij := add2(pi, { i, j });
            w := worley_squares + worley_square_index({ int(p_ij.x), int(p_ij.y) });

            for (m := 0; m < w.count; m++) {
                d := distance_squared2(p, add2(p_ij, w.points[m]));
                if (d < f1) {
                    f2 = f1;
                    f1 = d;
                } else if (d < f2) {
                    f2 = d;
                }
            }
        }
    }

    {
        i := 1.;
        j := 1.;
        face_dist := magnitude_squared2({ 1. - pf.x, 1. - pf.y });

        if (face_dist < f2) {
            p_ij := add2(pi, { i, j });
            w := worley_squares + worley_square_index({ int(p_ij.x), int(p_ij.y) });

            for (m := 0; m < w.count; m++) {
                d := distance_squared2(p, add2(p_ij, w.points[m]));
                if (d < f1) {
                    f2 = f1;
                    f1 = d;
                } else if (d < f2) {
                    f2 = d;
                }
            }
        }
    }

    // We only check the 8 adjacent squares. There are more that the
    // closest point could theoretically be in but I have never seen this happen.

    #assert(f1 <= f2);
    #assert(f2 >= 0);
    return { sqrt(f1), sqrt(f2) };
}


// By representing points within a given square in 16 bit fixed point we can fit
// four in 16 bytes, and then do one 16 byte load to fetch what you need to
// calculate all the distances to the points in that square. This uses 13
// fractional bits: of the high bits, one is used for the sign, and one is used
// to have precision in the [1,2) and [-1,-2) range for points in adjacent
// squares, and a third is used to place sentinel (i.e., empty) points outside
// of the valid range (instead of tracking the number of points in a square
// explicitly).

#static_assert(WorleyMaxPointsPerSquare == 4)

struct short2 {
    x: int16;
    y: int16;
}

struct WorleySquare16 {
    points: short2[WorleyMaxPointsPerSquare];
}

const WorleyPrecisionBitPos = 13;
const WorleyPrecision = (1 << WorleyPrecisionBitPos);

var worley_squares16: WorleySquare16[];
func worley_sse(p01: float2, grid_size: float): float2 {
    #assert(worley_squares16);
    p := mul2s(p01, grid_size);
    pi := float2_to_int2(p);

    if (p.x < 0) {
        pi.x -= 1;
    }
    if (p.y < 0) {
        pi.y -= 1;
    }

    pf := sub2(p, int2_to_float2(pi));
    pfix := short2 { short(pf.x * WorleyPrecision), short(pf.y * WorleyPrecision) };
    pfix8 := set4si((pfix.y << 16) + pfix.x);
    #assert(abs(pfix.x) < WorleyPrecision);
    #assert(abs(pfix.y) < WorleyPrecision);

    max_dist := int(2*Sqrt2 * WorleyPrecision) << WorleyPrecisionBitPos;
    max_dists := set4si(max_dist);

    face_offsets: short[3] = { -WorleyPrecision, 0, +WorleyPrecision };
    x_faces: int[3] = { pi.x - 1, pi.x, pi.x + 1 };
    y_faces: int[3] = { pi.y - 1, pi.y, pi.y + 1 };

    f1fix := max_dist;
    f2fix := max_dist;
    min_dists := max_dists;
    for (y := 0; y < 3; y++) {
        for (x := 0; x < 3; x++) {
            w := worley_squares16 + worley_square_index({ x_faces[x], y_faces[y] });
            pos := int2 { face_offsets[x], face_offsets[y] };
            XY := set4si((pos.y << 16) + pos.x);
            xy := add8i(load8i((:short8*)&w.points[0].x), XY);
            diff := sub8i(pfix8, xy);
            i_dists := madd8i(diff, diff);
            min := min4u(min_dists, i_dists);
            // Only necessary for f2:
            max := max4u(min_dists, i_dists);
            min_dists = min4u(min, shuffle4i(max, SHUFFLE(2,1,0,3)));
        }
    }

    rescaled := shr4si(min_dists, WorleyPrecisionBitPos);
    f_mins := sqrt4(div4(int4_to_float4(rescaled), set4s(WorleyPrecision)));

    ds: float[4];
    store4(ds, f_mins);
    f1 := 2*Sqrt2;
    f2 := 2*Sqrt2;
    for (i := 0; i < 4; i++) {
        if (ds[i] < f2) {
            if (ds[i] < f1) {
                f2 = f1;
                f1 = ds[i];
            } else {
                f2 = ds[i];
            }
        }
    }
    #assert(f1 < 2*Sqrt2);
    #assert(f2 < 2*Sqrt2);
    #assert(f1 >= 0);
    #assert(f2 >= 0);

    return { f1, f2 };
}

@inline
func worley(p01: float2, grid_size: float): float2 {
    if (UseWorleySSE) {
        return worley_sse(p01, grid_size);
    } else {
        return worley_scalar(p01, grid_size);
    }
}

func worley_octaves(p: float2, grid_size: float): float2 {
    s := (1 / (.5+.25+.125+.0625));
    a := mul2s(worley(p, grid_size), 0.5);
    b := mul2s(worley(mul2s(p, 1.5), grid_size), 0.25);
    c := mul2s(worley(mul2s(p, 3.), grid_size), 0.125);
    d := mul2s(worley(mul2s(p, 4.2), grid_size), 0.0625);

    return mul2s(add2(a, add2(b, add2(c, d))), s);
}

func rwo_gradient(p: int2): float2 {
    // bad_hash_int2 with fnv-32 values so it gives the same results as the sse version
    h := (((0x811c9dc5 ^ uint(p.x)) * 16777619u) ^ uint(p.y)) * 16777619u;
    a := xor_shift(h);
    b := float_from_random_bits(a);

    // Generate a random direction (x, y). (sqrt(b), sqrt(1 - b)) follows from
    // the usual (b, sqrt(1 - b*b)), but we take the sqrt of b for x for two
    // reasons. Firstly, the two sqrts seems to fare better speed wise--possibly
    // due to pipelining? Secondly, if we generate y from a uniform x, then x is
    // uniformly distributed on the unit interval, *not* the x part of the unit
    // circle. sqrt(b) pushes the points in (0,1) towards 1, to be more
    // cosine-weighted-like, so it's slightly better (but still worse than
    // sincos(2piX)). Another option is randomly swapping x and y, but that
    // tanks throughput.
    x := sqrt(b);
    y := sqrt(1 - b);

    // This positive in both x and y, but we don't use all the bits in a to
    // generate the random float, so we use those to dump it in some quadrant
    // of the unit circle.
    x_sign := a & (1<<31);
    y_sign := (a<<1) & (1<<31);
    xx := fbits{i = (fbits{f=x}.i + x_sign)}.f;
    yy := fbits{i = (fbits{f=y}.i + y_sign)}.f;

    return { xx, yy };
}

func random_warp_one(p: float2, scale: float): float2 {
    a := rwo_gradient(float2_to_int2(add2(p, { 0, 0 })));
    b := rwo_gradient(float2_to_int2(add2(p, { 1, 0 })));
    c := rwo_gradient(float2_to_int2(add2(p, { 0, 1 })));
    d := rwo_gradient(float2_to_int2(add2(p, { 1, 1 })));
    r := float2 { p.x - int(p.x), p.y - int(p.y) };

    x := r.x*r.x*(3. - 2.*r.x);
    y := r.y*r.y*(3. - 2.*r.y);

    ab := lerp2(a, b, x);
    cd := lerp2(c, d, x);
    abcd := lerp2(ab, cd, y);

    return mul2s(abcd, scale);
}

func random_warp_scalar(p: float2, freq: float, scale: float): float2 {
    a := 1.;
    b := a*.5;
    c := b*.5;
    d := c*.5;

    q := mul2s(p, freq);
    return add2(p, mul2s(add2(random_warp_one(q, a),
                         add2(random_warp_one(mul2s(q, 2), b),
                         add2(random_warp_one(mul2s(q, 4), c),
                              random_warp_one(mul2s(q, 8), d)))),
                    scale / (a+b+c+d)));
}

struct float4x2 {
    x: float4;
    y: float4;
}

func rwo_gradient_sse(px: float4, py: float4): float4x2 {
    pxi := float4_to_int4(px);
    pyi := float4_to_int4(py);
    H0 := set4si(0x811c9dc5);
    H1 := set4si(16777619);
    h := mul4i(xor128i(mul4i(xor128i(pxi, H0), H1), pyi), H1);
    a := xor128i(h, shl4si(h, 13));
    a  = xor128i(a, shr4si(a, 17));
    a  = xor128i(a, shl4si(a, 5));
    b := cast_int4_to_float4(or128i(and128i(a, set4si(f_sig_mask)), set4si(f_exp_1_2_mask)));
    c := sub4(b, set4s(1));
    x := sqrt4(c);
    y := sqrt4(sub4(set4s(1), c));

    x_sign := and128i(a, set4si(1 << 31));
    y_sign := and128i(shl4si(a, 1), set4si(1 << 31));

    return { cast_int4_to_float4(add4i(cast_float4_to_int4(x), x_sign)), cast_int4_to_float4(add4i(cast_float4_to_int4(y), y_sign)) };
}

func random_warp_sse(p: float2, freq: float, scale: float): float2 {
    one := set4s(1.);
    two := set4s(2.);
    three := set4s(3.);

    scale4 := set4(0.125, 0.25, 0.5, 1);
    octave := set4(8, 4, 2, 1);

    qx := mul4(set4s(p.x * freq), octave);
    qy := mul4(set4s(p.y * freq), octave);
    qxi := floor4(qx);
    qyi := floor4(qy);
    qxi1 := add4(qxi, one);
    qyi1 := add4(qyi, one);

    a := rwo_gradient_sse(qxi, qyi);
    b := rwo_gradient_sse(qxi1, qyi);
    c := rwo_gradient_sse(qxi, qyi1);
    d := rwo_gradient_sse(qxi1, qyi1);

    rx := sub4(qx, qxi);
    ry := sub4(qy, qyi);

    x := mul4(mul4(rx, rx), sub4(three, mul4(rx, two)));
    y := mul4(mul4(ry, ry), sub4(three, mul4(ry, two)));

    abx := lerp4(a.x, b.x, x);
    aby := lerp4(a.y, b.y, x);
    cdx := lerp4(c.x, d.x, x);
    cdy := lerp4(c.y, d.y, x);
    abcdx := mul4(lerp4(abx, cdx, y), scale4);
    abcdy := mul4(lerp4(aby, cdy, y), scale4);

    xy01 := unpacklo4(abcdx, abcdy);
    xy23 := unpackhi4(abcdx, abcdy);

    xyxy := add4(xy01, xy23);
    x_y_ := unpackhi4(xyxy, xyxy);

    offset := add4(xyxy, x_y_);

    p4 := set4(0, 0, p.y, p.x);
    result4 := add4(p4, mul4s(offset, scale / (1 + 0.5 + 0.25 + 0.125)));

    // Dumb, but the compiler does the right thing.
    result: float2[2] = {};
    storeu4((:float*)result, result4);
    return result[0];
}

@inline
func random_warp(p: float2, freq: float, scale: float): float2 {
    return random_warp_sse(p, freq, scale);
}