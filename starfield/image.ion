// WritableRegion provides a mechanism to allow concurrent access to an image's
// pixels but this places some constraints on how you do that. Most of the time
// you want to write to an image you want to write to multiple pixels, which you
// do with PixelIter, which handles this for you. But in the case you want to
// access the pixels buffer directly, you need to call image_writable to get a
// view into the buffer that you are allowed to write to.

struct WritableRegion {
    // Top left inclusive
    x0: int;
    y0: int;
    // Bottom right exclusive. Can be zero or exceed image bounds.
    x1: int;
    y1: int;
}

struct StrictWritableRegion {
    x0: int;
    y0: int;
    // Must be set and does not exceed image bounds.
    x1: int;
    y1: int;
    // &[x0, y0]
    pixels: Color*;
}

enum ImageFlags {
    // If you see this flag outside of this file something has gone very wrong
    IsWritableRegionCopyOnly = 1
}

struct Image {
    pixels: Color*;
    size: int2;
    wr: WritableRegion;
    stride: int;
    flags: uint;
}

func image_writable(img: Image*): Image {
    wr := strict_writable_region(img);
    result: Image;
    result.pixels = wr.pixels;
    result.size = { wr.x1 - wr.x0, wr.y1 - wr.y0 };
    result.wr = { 0, 0, result.size.x, result.size.y };
    result.stride = img.stride;
    return result;
}

func make_image(dim: int2): Image {
    size := checked_mul3(dim.x, dim.y, sizeof(Color));
    pixels := alloc_zero(size, alignof(float4));
    return image_from_pixels(pixels, dim);
}

func make_uninitialised_image_like(img: Image*): Image {
    writable := image_writable(img);
    size := checked_mul3(writable.size.x, writable.size.y, sizeof(Color));
    return Image {
        pixels = alloc(size, alignof(float4)),
        size = img.size,
        wr = { img.wr.x0, img.wr.y0, img.wr.x1, img.wr.y1 },
        stride = writable.size.x,
        flags = IsWritableRegionCopyOnly
    };
}

func image_from_pixels(pixels: Color*, size: int2): Image {
    return Image {
        pixels = pixels,
        size = size,
        wr = { 0, 0, size.x, size.y },
        stride = size.x
    };
}

func free_image(img: Image*) {
    #assert(img.pixels);
    free(img.pixels);
    img.pixels = 0;
    img.size = { 0, 0 };
}

func image_clear(img: Image*) {
    #assert(img.size.x == img.stride);
    zero(img.pixels, img.size.x*img.size.y*sizeof(Color));
}

func image_copy(img: Image*): Image {
    #assert(img.pixels);
    #assert(img.size.x == img.stride);
    result := make_image(img.size);
    copy(result.pixels, img.pixels, img.size.x*img.size.y*sizeof(Color));
    return result;
}

func image_copy_to(dest: Image*, src: Image*) {
    if ((src.size.x == dest.size.x) && (src.size.y == dest.size.y)) {
        copy(dest.pixels, src.pixels, src.size.x*src.size.y*sizeof(Color));
    } else {
        for (it := pixel_iter_begin(dest, {}); pixel_iter_next(&it)) {
            *it.pixel = image_sample_nearest(src, it.pos);
        }
    }
}

func image_to_rgb8(dest: RGB8*, size: int2, src: Image*) {
    #assert(src.size.x == size.x);
    #assert(src.size.y == size.y);
    src_end := src.pixels + src.stride*src.size.y;
    for (src_it := src.pixels; src_it != src_end; src_it++) {
        *dest = color_to_rgb8(*src_it);
        dest++;
    }
}

func has_complete_writable_region(img: Image*): bool {
    return img.wr.x0 == 0 && img.wr.y0 == 0 &&
        ((img.wr.x1 == 0 && img.wr.y1 == 0) || (img.wr.x1 == img.size.x && img.wr.y1 == img.size.y));
}

func strict_writable_region(img: Image*): StrictWritableRegion {
    return {
        x0 = img.wr.x0,
        y0 = img.wr.y0,
        x1 = img.wr.x1 ? clampi(0, img.size.x, img.wr.x1) : img.size.x,
        y1 = img.wr.y1 ? clampi(0, img.size.y, img.wr.y1) : img.size.y,
        pixels = (img.flags & IsWritableRegionCopyOnly) ? img.pixels : (img.pixels + (img.wr.x0 + img.wr.y0*img.stride))
    };
}

struct PixelIter {
    image: Image*;
    wr: StrictWritableRegion;
    stride: int;
    aspect_ratio: float;
    start: int2;
    end: int2;
    rect: Rect;
    wr_pos: int2;
    it_pos: float2;
    line_start: float2;
    dx: float2;
    dy: float2;

    pos: float2;
    img_pos: float2;
    pixel: Color*;
}

func pixel_iter_begin_tex(tex: Tex*, rect: Rect): PixelIter {
    img := tex_image(tex);
    return pixel_iter_begin(&img, rect);
}

func pixel_iter_begin(image: Image*, rect: Rect): PixelIter {
    iter: PixelIter = {};

    if (is_zero_rect(rect)) {
        rect = all_rect(image);
    }

    aspect_ratio := rect.size.x / rect.size.y;

    a := rect_to_image(image, rect, { 0, 0 });
    b := rect_to_image(image, rect, { aspect_ratio, 0 });
    c := rect_to_image(image, rect, { 0, 1 });
    d := rect_to_image(image, rect, { aspect_ratio, 1 });

    x_min := smin4(a.x, b.x, c.x, d.x);
    x_max := smax4(a.x, b.x, c.x, d.x);
    y_min := smin4(a.y, b.y, c.y, d.y);
    y_max := smax4(a.y, b.y, c.y, d.y);

    origin := image_to_rect(rect, image, { 0, 0 });
    iter.dx = sub2(image_to_rect(rect, image, { 1. / image.size.y, 0 }), origin);
    iter.dy = sub2(image_to_rect(rect, image, { 0, 1. / image.size.y }), origin);

    iter.image = image;
    iter.wr = strict_writable_region(image);
    iter.stride = image.stride;
    iter.aspect_ratio = aspect_ratio;
    iter.rect = rect;

    start := int2 {
        clampi(iter.wr.x0, iter.wr.x1, int(ceil(x_min * image.size.y - 0.5))),
        clampi(iter.wr.y0, iter.wr.y1, int(ceil(y_min * image.size.y - 0.5)))
    };

    end := int2 {
        clampi(iter.wr.x0, iter.wr.x1 - 1, int(x_max * image.size.y - 0.5)) + 1,
        clampi(iter.wr.y0, iter.wr.y1 - 1, int(y_max * image.size.y - 0.5)) + 1
    };

    iter.img_pos = { (0.5 + start.x - 1) / image.size.y, (0.5 + start.y) / image.size.y };
    iter.pos = image_to_rect(rect, iter.image, iter.img_pos);

    wr_offset := int2 { iter.wr.x0, iter.wr.y0 };

    iter.wr_pos = sub2i({ start.x - 1, start.y }, wr_offset);
    iter.it_pos = iter.pos;
    iter.line_start = iter.pos;
    iter.start = sub2i(start, wr_offset);
    iter.end = sub2i(end, wr_offset);

    return iter;
}

func pixel_iter_next(it: PixelIter*): bool {
    it.wr_pos.x++;

    for (; it.wr_pos.y < it.end.y; it.wr_pos.y++) {
        for (; it.wr_pos.x < it.end.x; it.wr_pos.x++) {
            // Todo: used fixed point instead?
            it.it_pos = add2(it.it_pos, it.dx);

            if (inside_normal_rect(it.it_pos, it.aspect_ratio)) {
                it.pixel = it.wr.pixels + (it.wr_pos.x + it.wr_pos.y*it.stride);
                it.pos = it.it_pos;
                it.img_pos = rect_to_image(it.image, it.rect, it.it_pos);
                return true;
            }
        }

        it.line_start = add2(it.line_start, it.dy);
        it.it_pos = it.line_start;
        it.wr_pos.x = it.start.x;
    }

    return false;
}

func test_pixel_iterator(dim: int2) {
    img := make_image(dim);

    for (i := 0; i < dim.x; i++) {
        for (j := 0; j < dim.y; j++) {
            r := Color {
                random01(),
                random01(),
                random01(),
                random01()
            };

            img.pixels[i + j*dim.x] = r;
        }
    }

    {
        i := 0;
        j := 0;
        for (it := pixel_iter_begin(&img, all_rect(&img)); pixel_iter_next(&it)) {
            p := &img.pixels[i + j*dim.x];
            p_it := it.pixel;
            c := image_sample_linear(&img, it.pos);
            d := image_sample_nearest(&img, it.pos);
            #assert(p == p_it);
            // No epsilon necessary
            #assert(p.r == c.r);
            #assert(p.g == c.g);
            #assert(p.b == c.b);
            #assert(p.a == c.a);
            #assert(p.r == d.r);
            #assert(p.g == d.g);
            #assert(p.b == d.b);
            #assert(p.a == d.a);

            i++;
            if (i == dim.x) {
                i = 0;
                j++;
            }
        }
        #assert(i + j*dim.x == dim.x*dim.y);
    }

    {
        half_dim := div2si(dim, 2);

        i := 0;
        j := 0;
        rect := all_rect(&img);
        rect.size.x /= 2;
        rect.size.y /= 2;
        pp := img.pixels + dim.x/4 + (dim.y/4)*dim.x;
        for (it := pixel_iter_begin(&img, rect); pixel_iter_next(&it)) {
            p := pp++;
            p_it := it.pixel;
            c := image_sample_linear(&img, it.img_pos);
            d := image_sample_nearest(&img, it.img_pos);
            #assert(p == p_it);
            #assert(p.r == c.r);
            #assert(p.g == c.g);
            #assert(p.b == c.b);
            #assert(p.a == c.a);
            #assert(p.r == d.r);
            #assert(p.g == d.g);
            #assert(p.b == d.b);
            #assert(p.a == d.a);

            i++;
            if (i == half_dim.x) {
                i = 0;
                j++;
                pp = pp - half_dim.x + dim.x;
            }
        }
        #assert(i + j*half_dim.x == half_dim.x*half_dim.y);
    }
    free_image(&img);
}

func assert_correct_signs(a: float, b: float, c: float, d: float, ab: float, cd: float, abcd: float) {
    if (a > 0 && b > 0) {
        #assert(ab >= 0);
        if (c > 0 && d > 0) {
            #assert(cd >= 0);
            #assert(abcd >= 0);
        }
    }
    if (c > 0 && d > 0) {
        #assert(cd >= 0);
    }
}

// Ideally... this wouldn't be necessary. But I want to allow threads to make
// miminal copies of the regions of images they write to in usage code that is
// mostly threading oblivious. So, we need to allow sampling of Images whose
// pixel buffers point to the start of their writable region, not [0,0].
func get_wr_read_offset(img: Image*): int {
    if (img.flags & IsWritableRegionCopyOnly) {
        return img.wr.x0 + img.wr.y0*img.stride;
    }

    return {};
}

enum EdgeBehavior {
    Edge_Black,
    Edge_Clamp,
    Edge_Repeat,
    Edge_Mirror,
}

func image_sample_linear(img: Image*, pos: float2): Color {
    return image_sample_linear_edge(img, pos, Edge_Black);
}

func sample_edge(img: Image*, edge_behavior: EdgeBehavior, a: int2, samples_out: Color[4]) {
    b := add2i(a, {1, 0});
    c := add2i(a, {0, 1});
    d := add2i(a, {1, 1});

    switch (edge_behavior) {
        case Edge_Black: {
            a_idx: uint = a.x + a.y*img.stride;
            b_idx: uint = b.x + b.y*img.stride;
            c_idx: uint = c.x + c.y*img.stride;
            d_idx: uint = d.x + d.y*img.stride;
            end: uint = img.stride*img.size.y - get_wr_read_offset(img);
            samples_out[0] = (a_idx < end) ? img.pixels[a_idx] : {};
            samples_out[1] = (b_idx < end) ? img.pixels[b_idx] : {};
            samples_out[2] = (c_idx < end) ? img.pixels[c_idx] : {};
            samples_out[3] = (d_idx < end) ? img.pixels[d_idx] : {};

            return;
        }
        case Edge_Clamp: {
            a.x = clampi(0, img.size.x - 1, a.x);
            b.x = clampi(0, img.size.x - 1, b.x);
            c.x = clampi(0, img.size.x - 1, c.x);
            d.x = clampi(0, img.size.x - 1, d.x);
            a.y = clampi(0, img.size.y - 1, a.y);
            b.y = clampi(0, img.size.y - 1, b.y);
            c.y = clampi(0, img.size.y - 1, c.y);
            d.y = clampi(0, img.size.y - 1, d.y);
        }
        case Edge_Repeat: {
            a.x = repeati(a.x, img.size.x);
            b.x = repeati(b.x, img.size.x);
            c.x = repeati(c.x, img.size.x);
            d.x = repeati(d.x, img.size.x);
            a.y = repeati(a.y, img.size.y);
            b.y = repeati(b.y, img.size.y);
            c.y = repeati(c.y, img.size.y);
            d.y = repeati(d.y, img.size.y);
        } case Edge_Mirror: {
            a.x = mirrori(a.x, img.size.x);
            b.x = mirrori(b.x, img.size.x);
            c.x = mirrori(c.x, img.size.x);
            d.x = mirrori(d.x, img.size.x);
            a.y = mirrori(a.y, img.size.y);
            b.y = mirrori(b.y, img.size.y);
            c.y = mirrori(c.y, img.size.y);
            d.y = mirrori(d.y, img.size.y);
        }
    }

    samples_out[0] = img.pixels[a.x + a.y*img.stride];
    samples_out[1] = img.pixels[b.x + b.y*img.stride];
    samples_out[2] = img.pixels[c.x + c.y*img.stride];
    samples_out[3] = img.pixels[d.x + d.y*img.stride];
}

func image_sample_linear_edge(img: Image*, pos: float2, edge_behavior: EdgeBehavior): Color {
    if (img.pixels == 0) {
        return {};
    }

    #assert(img.size.x);
    #assert(img.size.y);
    #assert(img.stride);

    wr_offset := get_wr_read_offset(img);

    scaled := float2 {
        pos.x * img.size.y - 0.5,
        pos.y * img.size.y - 0.5,
    };

    vi := float2_to_int2(scaled);
    vf := sub2(scaled, int2_to_float2(vi));

    #assert(!(wr_offset > 0) || (edge_behavior == Edge_Black));
    vi.x -= wr_offset;

    A: Color;
    B: Color;
    C: Color;
    D: Color;

    if (uint(vi.x) < uint(img.size.x - wr_offset - 1) && uint(vi.y) < uint(img.size.y - 1)) {
        A = img.pixels[vi.x + vi.y*img.stride];
        B = img.pixels[vi.x + vi.y*img.stride + 1];
        C = img.pixels[vi.x + vi.y*img.stride + img.stride];
        D = img.pixels[vi.x + vi.y*img.stride + img.stride + 1];
    } else {
        samples: Color[4];
        sample_edge(img, edge_behavior, vi, samples);
        A = samples[0];
        B = samples[1];
        C = samples[2];
        D = samples[3];
    }

    AB := color_lerp(A, B, vf.x);
    CD := color_lerp(C, D, vf.x);
    ABCD := color_lerp(AB, CD, vf.y);

    return ABCD;
}

func image_sample_nearest(img: Image*, pos: float2): Color {
    if (img.pixels == 0) {
        return {};
    }

    #assert(img.size.x);
    #assert(img.size.y);
    #assert(img.stride);

    // Round to pixel center. x + .5 - .5 = x
    p := int2 { int(pos.x * img.size.y), int(pos.y * img.size.y) };
    return image_fetch(img, p);
}

func image_fetch(img: Image*, pos: int2): Color {
    if (img.pixels == 0 || pos.x < 0 || pos.x >= img.size.x || pos.y < 0 || pos.y >= img.size.y) {
        #assert(0);
        return {};
    }

    #assert(pos.x + pos.y*img.size.x < img.size.y*img.size.x);
    return img.pixels[pos.x + pos.y*img.stride - get_wr_read_offset(img)];
}