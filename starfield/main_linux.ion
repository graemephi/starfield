// The following defines mess this up, so preamble instead of include to put it first
#foreign(preamble = "#include <x86intrin.h>")

#foreign(preamble = "#define STB_IMAGE_WRITE_IMPLEMENTATION\n#include \"stb_image_write.h\"")

// Suppress extern in output
#foreign(preamble = "#define extern")

// gcc/clang doesnt like static always_inline, so remove static
#foreign(preamble = "#undef INLINE\n#define INLINE inline __attribute__((always_inline))")

import libc { printf, cos, sin, exp, ceil, log, exit, pow, log2, fwrite, fflush }
import std { ... }

// ??????
@foreign
func stdout();

func forward_to_stdout(context: void*, data: void*, size: int) {
    fwrite(data, 1, size, (:libc.FILE*)stdout);
}

@foreign("stbi_write_png_to_func")
func stbi_write_png_to_func(fn: func(context: void*, data: void*, size: int), context: void*, w: int, h: int, comp: int, data: void const*, stride_in_bytes: int): int;

var BlockDim: int2 const = { ImageDim, ImageDim };

struct int2 {
    x: int;
    y: int;
}

struct float2 {
    x: float;
    y: float;
}

struct Threads {
    started: int;
}

var threads: Threads;

func threads_init(threads: Threads*) {

}

func threads_fork(threads: Threads*) {
    threads.started = true;
}

func threads_join(threads: Threads*) {
    threads_fork(threads);
    threads.started = false;
}

func threads_draw_starfield(threads: Threads*, img: Image, starfield: Starfield*) {
    #assert(threads.started == false);
    draw_starfield(&img, starfield);
}

func threads_blur_to(threads: Threads*, dest: Image*, src: Image*, radius: float) {
    #assert(threads.started == false);
    blur_to(dest, src, radius);
}

func threads_calculate_luminance(threads: Threads*, img: Image*, result_out: float2*) {
    #assert(threads.started == false);
    #assert(result_out);
    *result_out = calculate_luminance(img);
}

func threads_post_process(threads: Threads*, img: Image, p: PostProcess*) {
    #assert(threads.started == false);
    post_process(&img, p);
}

func main(argc: int, argv: char**): int {
    _MM_SET_FLUSH_ZERO_MODE(ION_FLUSH_ZERO_ON);
    _MM_SET_DENORMALS_ZERO_MODE(ION_DENORMALS_ZERO_ON);

    if (argc < 2) {
        printf("Usage: starfield \"TWEET\"\n");
        return -1;
    }

    dest := alloc2(ImageSize, sizeof(RGB8));
    starfield_text := argv[1];

    scratch_buf := alloc(MB(64), sizeof(usize));
    scratch_allocator := temp_allocator(scratch_buf, MB(128));
    scratch = &scratch_allocator;
    scratch_mark := temp_begin(scratch);

    mem_size := checked_mul3(ImageSize.x, ImageSize.y, sizeof(Color));
    mem_size += mem_size * 64; // diffraction, blurs
    mem_size += MB(64); // state
    mem_buf := alloc(mem_size, sizeof(usize));
    mem := temp_allocator(mem_buf, mem_size);
    current_allocator = (:Allocator*)&mem;

    noise_init();
    img := render_starfield(starfield_text, ImageSize);
    image_to_rgb8(dest, ImageSize, &img);

    err := stbi_write_png_to_func(forward_to_stdout, 0, ImageSize.x, ImageSize.y, 4, dest, ImageSize.x * sizeof(RGB8));

    return !err;
}
