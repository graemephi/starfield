#foreign(header = "<x86intrin.h>")

// Suppress extern in output
#foreign(preamble = "#define extern")

// Workaround for the fact that ion wants a main function
#foreign(preamble = "#define main __attribute__((visibility (\"default\"))) render")

// gcc doesnt like static always_inline, so remove static
#foreign(preamble = "#undef INLINE\n#define INLINE inline __attribute__((always_inline))")

import libc { printf, fabs, cos, sin, exp, ceil, log, exit, pow, log2, abs, fflush }
import std { ... }

struct int2 {
    x: int;
    y: int;
}

struct float2 {
    x: float;
    y: float;
}

struct Threads {
    started: int;
}

var threads: Threads;

func threads_init(threads: Threads*) {

}

func threads_fork(threads: Threads*) {
    threads.started = true;
}

func threads_join(threads: Threads*) {
    threads_fork(threads);
    threads.started = false;
}

func threads_draw_starfield(threads: Threads*, img: Image*, wr: WritableRegion, starfield: Starfield*) {
    #assert(threads.started == false);
    if (wr.x0 == 0 && wr.y0 == 0) {
        draw_starfield(img, starfield);
    }
}

func threads_blur_to(threads: Threads*, dest: Image*, src: Image*, radius: float) {
    #assert(threads.started == false);
    blur_to(dest, src, radius);
}

func threads_calculate_luminance(threads: Threads*, img: Image*, result_out: float2*) {
    #assert(threads.started == false);
    #assert(result_out);
    *result_out = calculate_luminance(img);
}

func threads_post_process(threads: Threads*, img: Image*, wr: WritableRegion, p: PostProcess*) {
    #assert(threads.started == false);
    if (wr.x0 == 0 && wr.y0 == 0) {
        post_process(img, p);
    }
}

func main(dest: RGB8*, dim: int2, starfield_text: char*): void {
    _MM_SET_FLUSH_ZERO_MODE(ION_FLUSH_ZERO_ON);
    _MM_SET_DENORMALS_ZERO_MODE(ION_DENORMALS_ZERO_ON);

    base_allocator := current_allocator;

    scratch_buf := alloc(MB(64), sizeof(usize));
    scratch_allocator := temp_allocator(scratch_buf, MB(64));
    scratch = &scratch_allocator;
    scratch_mark := temp_begin(scratch);

    mem_size := checked_mul3(dim.x, dim.y, sizeof(Color));
    mem_size += mem_size * 32; // diffraction, blurs
    mem_size += MB(64); // state
    mem_buf := alloc(mem_size, sizeof(usize));
    mem := temp_allocator(mem_buf, mem_size);
    current_allocator = (:Allocator*)&mem;

    noise_init();
    img := render_starfield(starfield_text, dim);
    image_to_rgb8(dest, dim, &img);

    current_allocator = base_allocator;
    free(scratch_buf);
    free(mem_buf);
}
