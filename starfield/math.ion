const Pi = PI;
const Tau = Pi*2;
const Sqrt2 = 1.4142135623730950488;
const InvSqrt2 = 1. / Sqrt2;

func is_power_2(x: int32): bool {
    return x != 0 && x & (x - 1) == 0;
}

func log2i(x: int): int {
    return int(SDL_MostSignificantBitIndex32(uint32(x)));
}

func square(x: float): float {
    return x*x;
}

func clamp(a: float, b: float, x: float): float {
    return (x < a) ? a :
           (x > b) ? b :
                     x;
}

func clamp_low(a: float, x: float): float {
    return max(a, x);
}

func clamp_high(b: float, x: float): float {
    return min(b, x);
}

func clampi(a: int32, b: int32, x: int32): int32 {
    return (x < a) ? a :
           (x > b) ? b :
                     x;
}

func clampi_low(a: int, x: int): int {
    return maxi(a, x);
}

func clampi_high(b: int, x: int): int {
    return mini(b, x);
}

func clamp01(x: float): float {
    return clamp(0, 1, x);
}

func clamp2(a: float, b: float, v: float2): float2 {
    return { clamp(a, b, v.x), clamp(a, b, v.y) };
}

func maxi(a: int, b: int): int {
    return (a > b) ? a : b;
}

func mini(a: int, b: int): int {
    return (a < b) ? a : b;
}

func max(a: float, b: float): float {
    return (a > b) ? a : b;
}

func min(a: float, b: float): float {
    return (a < b) ? a : b;
}

func safe_div(a: float, b: float): float {
    return b == 0 ? b : a / b;
}

func smin4(a: float, b: float, c: float, d: float): float {
    return min(min(a, b), min(c, d));
}

func smax4(a: float, b: float, c: float, d: float): float {
    return max(max(a, b), max(c, d));
}

func float2_to_int2(x: float2): int2 {
    return { int32(x.x), int32(x.y) };
}

func int2_to_float2(x: int2): float2 {
    return { float(x.x), float(x.y) };
}

func mul2(a: float2, b: float2): float2 {
    return { a.x * b.x, a.y * b.y };
}

func mul2s(a: float2, s: float): float2 {
    return { a.x * s, a.y * s };
}

func div2(a: float2, b: float2): float2 {
    return { a.x / b.x, a.y / b.y };
}

func div2s(a: float2, s: float): float2 {
    return { a.x / s, a.y / s };
}

func add2(a: float2, b: float2): float2 {
    return { a.x + b.x, a.y + b.y };
}

func add2s(a: float2, s: float): float2 {
    return { a.x + s, a.y + s };
}

func sub2(a: float2, b: float2): float2 {
    return { a.x - b.x, a.y - b.y };
}

func sub2s(a: float2, s: float): float2 {
    return { a.x - s, a.y - s };
}

func mul2i(a: int2, b: int2): int2 {
    return { a.x * b.x, a.y * b.y };
}

func mul2si(a: int2, s: int): int2 {
    return { a.x * s, a.y * s };
}

func div2i(a: int2, b: int2): int2 {
    return { a.x / b.x, a.y / b.y };
}

func div2si(a: int2, s: int): int2 {
    return { a.x / s, a.y / s };
}

func add2i(a: int2, b: int2): int2 {
    return { a.x + b.x, a.y + b.y };
}

func add2si(a: int2, s: int): int2 {
    return { a.x + s, a.y + s };
}

func sub2i(a: int2, b: int2): int2 {
    return { a.x - b.x, a.y - b.y };
}

func sub2si(a: int2, s: int): int2 {
    return { a.x - s, a.y - s };
}

func dot2i(a: int2, b: int2): int32 {
    return a.x*b.x + a.y*b.y;
}

func distance_squared2i(a: int2, b: int2): int32 {
    d := int2 { a.x - b.x, a.y - b.y };
    return dot2i(d, d);
}

func distance2i(a: int2, b: int2): float {
    d := distance_squared2i(a, b);
    return sqrt(float(d));
}

func dot2(a: float2, b: float2): float {
    return a.x*b.x + a.y*b.y;
}

func distance_squared2(a: float2, b: float2): float {
    d := sub2(a, b);
    return dot2(d, d);
}

func distance2(a: float2, b: float2): float {
    d := distance_squared2(a, b);
    return sqrt(d);
}

func magnitude_squared2(v: float2): float {
    vv := dot2(v, v);
    return vv;
}

func magnitude2(v: float2): float {
    vv := dot2(v, v);
    return vv ? sqrt(vv) : 0;
}

func magnitude2i(v: int2): float {
    return sqrt((:float)dot2i(v, v));
}

func mod2s(v: float2, m: float): float2 {
    return { mod(v.x, m), mod(v.y, m) };
}

func floor2(v: float2): float2 {
    return { float(int(v.x)), float(int(v.y)) };
}

func fract(x: float): float {
    return int(x) - x;
}

func fract2(v: float2): float2 {
    return sub2(floor2(v), v);
}

func normalise2(v: float2): float2 {
    m := magnitude2(v);
    return { v.x / m, v.y / m };
}

func xor_shift(x: uint32): uint32 {
    x ^= x << 13;
    x ^= x >> 17;
    x ^= x << 5;
    return x;
}

var random_state: uint32 = 1;
func random(): uint32 {
    random_state ^= random_state << 13;
    random_state ^= random_state >> 17;
    random_state ^= random_state << 5;
    return random_state;
}

func set_random_state(state: uint32): uint32 {
    old := random_state;
    random_state = state;
    return old;
}

union fbits {
    f: float;
    i: int;
}

const f_exp_1_2_mask = 0b0_01111111_00000000000000000000000;
const f_sig_mask     = 0b0_00000000_11111111111111111111111;
func float_from_random_bits(b: int): float {
    i := (b & f_sig_mask) | f_exp_1_2_mask;
    f := fbits { i = i }.f - 1.;
    return f;
}

func random01(): float {
    r := float_from_random_bits(random());
    return r;
}

func random_unit_vector2(): float2 {
    theta := random01() * Tau;
    return { cos(theta), sin(theta) };
}

func randomn(lo: int, hi: int): int {
    return random() % (hi - lo) + lo;
}

func randomr(lo: float, hi: float): float {
    return random01() * (hi - lo) + lo;
}

func random_poisson(L: float): int {
    result := -1;
    p := 1.;
    do {
        p *= random01();
        result++;
    } while (p > L);
    return result;
}

func random_normal(): float {
    u := 0.;
    v := 0.;
    s := 0.;
    do {
        u = random01() * 2. - 1.;
        v = random01() * 2. - 1.;
        s = u*u + v*v;
    } while(s >= 1);
    return u*sqrt((-2*log(s))/s);
}

func lerp(a: float, b: float, t: float): float {
    return (1 - t)*a + t*b;
}

func remap(a: float, b: float, m: float, n: float, x: float): float {
    return lerp(m, n, (x - a) / (b - a));
}

func lerp2(a: float2, b: float2, t: float): float2 {
    return float2 {
        lerp(a.x, b.x, t),
        lerp(a.y, b.y, t)
    };
}

func mod(x: float, m: float): float {
    if (x < 0) {
        x = m - x;
    }
    r := x / m;
    q := r - int(r);
    p := q * m;
    return p;
}

func wrap(x: float, m: float): float {
    y := mod(x, m * 2);
    if (y > m) {
        y = m - (y - m);
    }
    return y;
}

func smoothstep(x: float): float {
    x = clamp01(x);
    return x*x*(3 - 2*x);
}

func smoothstep2(v: float2): float2 {
    return { smoothstep(v.x), smoothstep(v.y) };
}

func smoothstep_range(a: float, b: float, x: float): float {
    if (x < a) {
        return a;
    } else if (x > b) {
        return b;
    }

    y := smoothstep((x - a) / (b - a)) * (b - a) + a;

    return y;
}

func smoothedge(center: float, width: float, x: float): float {
    return smoothstep((1./width) * (x - center) + 0.5);
}