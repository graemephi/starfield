//
// Atomics

// Ideally, we'd just use SDL atomics, but the sdl in ion defined SDL_atomic_t as an incomplete type :'(
#foreign(preamble = "#define volatile_long volatile long")

@foreign typedef volatile_long = long;

//
// sse

@foreign
func _MM_SET_FLUSH_ZERO_MODE(mask: uint32);
@foreign
func _MM_SET_DENORMALS_ZERO_MODE(mask: uint32);

// @foreign
// var _MM_FLUSH_ZERO_ON: uint32;
// @foreign
// var _MM_DENORMALS_ZERO_ON: uint32;

var ION_FLUSH_ZERO_ON = 0x8000;
var ION_DENORMALS_ZERO_ON = 0x0040;

@foreign("__m128")
struct float4 {
    m128_f32: float[4];
}

@foreign("__m128i")
union __m128i {
    m128i_i32: int[4];
    m128i_i16: short[8];
}

typedef int4 = __m128i;
typedef short8 = __m128i;

@foreign("_MM_SHUFFLE")
func SHUFFLE(d: int, c: int, b: int, a: int): int;

//
// floats

@foreign("_mm_add_ps")
func add4(a: float4, b: float4): float4;

@foreign("_mm_sub_ps")
func sub4(a: float4, b: float4): float4;

@foreign("_mm_mul_ps")
func mul4(a: float4, b: float4): float4;

@foreign("_mm_div_ps")
func div4(a: float4, b: float4): float4;

@foreign("_mm_rcp_ps")
func rcp4(a: float4): float4;

@foreign("_mm_floor_ps")
func floor4(a: float4): float4;

@foreign("_mm_load_ps")
func load4(p: float const*): float4;

@foreign("_mm_loadu_ps")
func loadu4(p: float const*): float4;

@foreign("_mm_store_ps")
func store4(p: float const*, a: float4);

@foreign("_mm_storeu_ps")
func storeu4(p: float const*, a: float4);

@foreign("_mm_set1_ps")
func set4s(p: float): float4;

@foreign("_mm_set_ps")
func set4(p3: float, p2: float, p1: float, p0: float): float4;

// Defined in main_(platform).ion
// @foreign("_mm_fmadd_ps")
// func fma4(a: float4, b: float4, c: float4): float4;

// @foreign("_mm_fmsub_ps")
// func fmsub4(a: float4, b: float4, c: float4): float4;

@foreign("_mm_hadd_ps")
func hadd4(a: float4, b: float4): float4;

@foreign("_mm_and_ps")
func and4(a: float4, b: float4): float4;

@foreign("_mm_or_ps")
func or4(a: float4, b: float4): float4;

@foreign("_mm_xor_ps")
func xor4(a: float4, b: float4): float4;

@foreign("_mm_min_ps")
func min4(a: float4, b: float4): float4;

@foreign("_mm_max_ps")
func max4(a: float4, b: float4): float4;

@foreign("_mm_cmpeq_ps")
func eq4(a: float4, b: float4): float4;

@foreign("_mm_cmpge_ps")
func ge4(a: float4, b: float4): float4;

@foreign("_mm_cmpgt_ps")
func gt4(a: float4, b: float4): float4;

@foreign("_mm_cmple_ps")
func le4(a: float4, b: float4): float4;

@foreign("_mm_cmplt_ps")
func lt4(a: float4, b: float4): float4;

@foreign("_mm_cmpneq_ps")
func neq4(a: float4, b: float4): float4;

@foreign("_mm_cmpnge_ps")
func nge4(a: float4, b: float4): float4;

@foreign("_mm_cmpngt_ps")
func ngt4(a: float4, b: float4): float4;

@foreign("_mm_cmpnle_ps")
func nle4(a: float4, b: float4): float4;

@foreign("_mm_cmpnlt_ps")
func nlt4(a: float4, b: float4): float4;

@foreign("_mm_cmpord_ps")
func ord4(a: float4, b: float4): float4;

@foreign("_mm_cmpunord_ps")
func unord4(a: float4, b: float4): float4;

@foreign("_mm_blend_ps")
func blend4(a: float4, b: float4, c: int): float4;

@foreign("_mm_blendv_ps")
func blendv4(a: float4, b: float4, c: float4): float4;

@foreign("_mm_shuffle_ps")
func shuffle4(a: float4, b: float4, c: int): float4;

@foreign("_mm_broadcastss_ps")
func broadcastss4(a: float4): float4;

@foreign("_mm_setzero_ps")
func zero4(): float4;

@foreign("_mm_movemask_ps")
func movemask4(a: float4): int;

@foreign("_mm_cvtss_f32")
func cvtss(a: float4): float;

@foreign("_mm_sqrt_ps")
func sqrt4(a: float4): float4;

@foreign("_mm_sqrt_ss")
func sqrts(a: float4): float4;

@foreign("_mm_rsqrt_ss")
func rsqrts(a: float4): float4;

@foreign("_mm_rsqrt_ps")
func rsqrt4(a: float4): float4;

@foreign("_mm_unpacklo_ps")
func unpacklo4(a: float4, b: float4): float4;

@foreign("_mm_unpackhi_ps")
func unpackhi4(a: float4, b: float4): float4;

@foreign("_mm_cvtepi32_ps")
func int4_to_float4(a: int4): float4;

@foreign("_mm_cvtepi32_ps")
func cvti4(a: int4): float4;

@foreign("_mm_castsi128_ps")
func cast_int4_to_float4(a: int4): float4;

//
// ints

@foreign("_mm_and_si128")
func and128i(a: __m128i, b: __m128i): __m128i;

@foreign("_mm_or_si128")
func or128i(a: __m128i, b: __m128i): __m128i;

@foreign("_mm_xor_si128")
func xor128i(a: __m128i, b: __m128i): __m128i;

@foreign("_mm_testz_si128")
func testz128i(a: __m128i, b: __m128i): int;

@foreign("_mm_movemask_epi8")
func movemask128i(a: __m128i): int;

@foreign("_mm_blendv_epi8")
func blendv16i(a: int4, b: int4, c: int4): int4;

@foreign("_mm_castps_si128")
func cast_float4_to_int4(a: float4): __m128i;

@foreign("_mm_cvtsi128_si64")
func i128_to_i64(a: int4): int64;

@foreign("_mm_cvtsi128_si32")
func i128_to_i32(a: int4): int32;

//
// 32 bit ints

@foreign("_mm_add_epi32")
func add4i(a: int4, b: int4): int4;

@foreign("_mm_sub_epi32")
func sub4i(a: int4, b: int4): int4;

@foreign("_mm_mullo_epi32")
func mul4i(a: int4, b: int4): int4;

@foreign("_mm_div_epi32")
func div4i(a: int4, b: int4): int4;

@foreign("_mm_slli_epi32")
func shl4si(a: int4, c: int): int4;

@foreign("_mm_srli_epi32")
func shr4si(a: int4, c: int): int4;

@foreign("_mm_srai_epi32")
func shra4si(a: int4, c: int): int4;

@foreign("_mm_min_epu32")
func min4i(a: int4, b: int4): int4;

@foreign("_mm_max_epi32")
func max4i(a: int4, b: int4): int4;

@foreign("_mm_min_epu32")
func min4u(a: int4, b: int4): int4;

@foreign("_mm_max_epu32")
func max4u(a: int4, b: int4): int4;

@foreign("_mm_load_epi32")
func load4i(p: int const*): int4;

@foreign("_mm_store_si128")
func store4i(p: __m128i const*, a: int4);

@foreign("_mm_set_epi32")
func set4i(a: int, b: int, c: int, d: int): int4;

@foreign("_mm_set1_epi32")
func set4si(a: int): int4;

@foreign("_mm_cvtps_epi32")
func float4_to_int4(a: float4): int4;

@foreign("_mm_shuffle_epi32")
func shuffle4i(a: int4, c: int): int4;

@foreign("_mm_cmpeq_epi32")
func eq4i(a: int4, b: int4): int4;

@foreign("_mm_cmpgt_epi32")
func gt4i(a: int4, b: int4): int4;

@foreign("_mm_cmplt_epi32")
func lt4i(a: int4, b: int4): int4;

@foreign("_mm_unpacklo_epi32")
func unpacklo4i(a: int4, b: int4): int4;

@foreign("_mm_unpackhi_epi32")
func unpackhi4i(a: int4, b: int4): int4;


//
// 16 bit ints

@foreign("_mm_add_epi16")
func add8i16(a: short8, b: short8): short8;

@foreign("_mm_sub_epi16")
func sub8i16(a: short8, b: short8): short8;

@foreign("_mm_mullo_epi16")
func mul8i16(a: short8, b: short8): short8;

@foreign("_mm_div_epi16")
func div8i16(a: short8, b: short8): short8;

@foreign("_mm_madd_epi16")
func madd8i16(a: short8, b: short8): int4;

@foreign("_mm_load_si128")
func load8i16(p: __m128i const*): short8;

@foreign("_mm_store_si128")
func store8i16(p: short const*, a: short8);

@foreign("_mm_set_epi16")
func set8i16(e7: short, e6: short, e5: short, e4: short, e3: short, e2: short, e1: short): short8;

@foreign("_mm_set1_epi16")
func set8si16(a: short): short8;

@foreign("_mm_cmpeq_epi16")
func equals8i16(a: short8, b: short8): short8;

@foreign("_mm_blend_epi16")
func blend8i16(a: short8, b: short8, c: int): short8;

@foreign("_mm_packs_epi32")
func pack4i16(a: int4, b: int4): short8;

// crc !?

@foreign("_mm_crc32_u32")
func crc32(acc: int, a: int): int;

//
//

func lerp4(a: float4, b: float4, t: float4): float4 {
    return fma4(sub4(b, a), t, a);
}

func lerp4s(a: float4, b: float4, t: float): float4 {
    return fma4(sub4(b, a), set4s(t), a);
}

func clamp4s(a: float, b: float, t: float4): float4 {
    return min4(max4(t, set4s(a)), set4s(b));
}

func add4s(a: float4, b: float): float4 {
    return add4(a, set4s(b));
}

func mul4s(a: float4, b: float): float4 {
    return mul4(a, set4s(b));
}

func mul4si(a: int4, b: int): int4 {
    return mul4i(a, set4si(b));
}

func sqrt(a: float): float {
    return (a == 0.) ? 0. : (a * cvtss(rsqrts(set4s(a))));
}

func rsqrt(a: float): float {
    return cvtss(rsqrts(set4s(a)));
}

func or4si(a: int4, b: int): int4 {
    return or128i(a, set4si(b));
}
