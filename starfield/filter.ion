func blur(img: Image*, radius: float) {
    blur_to(img, img, radius);
}

func blur_tex(tex: Tex*, radius: float) {
    #assert(tex.lod_levels == 1);
    img := tex_image(tex);
    blur(&img, radius);
}

func blur_asym(img: Image*, radius: float2) {
    blur_to_asym(img, img, radius);
}

func blur_fetch(row: Color*, len: int, i: int): float4 {
    if (i < 0 || i >= len) {
        return zero4();
    }

    return color_load(row + i);
}

func blur_row(dest: Color*, src: Color*, len: int, radius: float) {
    #assert(radius > 0);
    r := clampi(0, len - 2, int(radius));
    a := radius - r;

    r_rcp :=  1. / (2. * radius + 1.);
    c_acc := mul4s(blur_fetch(src, len, r + 1), a);

    for (i := 0; i <= r; i++) {
        c_acc = add4(c_acc, blur_fetch(src, len, i));
    }

    for (i := 0; i < r + 1; i++) {
        store4((:float*)(dest + i), mul4s(c_acc, r_rcp));
        c_acc = add4(c_acc, lerp4s(blur_fetch(src, len, i+r+1), blur_fetch(src, len, i+r+2), a));
        c_acc = sub4(c_acc, lerp4s(blur_fetch(src, len, i-r), blur_fetch(src, len, i-r-1), a));
    }
    for (i := r + 1; i < len - r - 2; i++) {
        store4((:float*)(dest + i), mul4s(c_acc, r_rcp));
        c_acc = add4(c_acc, lerp4s(color_load(src + i+r+1), color_load(src + i+r+2), a));
        c_acc = sub4(c_acc, lerp4s(color_load(src + i-r), color_load(src + i-r-1), a));
    }
    for (i := len - r - 2; i < len; i++) {
        store4((:float*)(dest + i), mul4s(c_acc, r_rcp));
        c_acc = add4(c_acc, lerp4s(blur_fetch(src, len, i+r+1), blur_fetch(src, len, i+r+2), a));
        c_acc = sub4(c_acc, lerp4s(blur_fetch(src, len, i-r), blur_fetch(src, len, i-r-1), a));
    }
}

func blur_transpose(dest: Color*, dest_width: int, src: Color*, src_width: int) {
    for (i := 0; i < src_width; i++) {
        *dest = *src;
        dest += dest_width;
        src++;
    }
}

func blur_horizontal(dest: Image*, src: Image*, radius: float) {
    #assert(src.size.x == dest.size.x);
    #assert(src.size.y == dest.size.y);
    #assert(has_complete_writable_region(dest));

    scratch: Color* = alloc(src.size.x*sizeof(Color), alignof(float4));

    for (y := 0; y < src.size.y; y++) {
        row_src := src.pixels + y*src.stride;
        row_dest := dest.pixels + y*dest.stride;
        blur_row(row_dest, row_src, src.size.x, radius);
        blur_row(scratch, row_dest, src.size.x, radius);
        blur_row(row_dest, scratch, src.size.x, radius);
    }

    free(scratch);
}

func blur_vertical(dest: Image*, src: Image*, radius: float) {
    #assert(src.size.x == dest.size.x);
    #assert(src.size.y == dest.size.y);
    #assert(has_complete_writable_region(dest));

    scratch: Color* = alloc(src.size.y * 2 * sizeof(Color), alignof(float4));
    scratch_a := scratch;
    scratch_b := scratch + src.size.y;

    for (x := 0; x < src.size.x; x++) {
        for (i := 0; i < src.size.y; i++) {
            scratch_a[i] = src.pixels[x + i*src.stride];
        }

        blur_row(scratch_b, scratch_a, src.size.y, radius);
        blur_row(scratch_a, scratch_b, src.size.y, radius);
        blur_row(scratch_b, scratch_a, src.size.y, radius);

        for (i := 0; i < dest.size.y; i++) {
            dest.pixels[x + i*dest.size.x] = scratch_b[i];
        }
    }

    free(scratch);
}

func blur_to(dest: Image*, src: Image*, radius: float) {
    #assert(dest.size.x == src.size.x);
    #assert(dest.size.y == src.size.y);
    #assert(has_complete_writable_region(dest));

    if (radius == 0.) {
        image_copy_to(dest, src);
        return;
    }

    temp :=  make_uninitialised_image({src.size.y, src.size.x});
    scratch: Color* = alloc(maxi(src.size.x, src.size.y)*sizeof(Color), alignof(float4));

    for (y := 0; y < src.size.y; y++) {
        row_src := src.pixels + y*src.stride;
        row_dest := dest.pixels + y*dest.stride;
        blur_row(scratch, row_src, src.size.x, radius);
        blur_row(row_dest, scratch, src.size.x, radius);
        blur_row(scratch, row_dest, src.size.x, radius);
        blur_transpose(temp.pixels + y, temp.size.x, scratch, src.size.x);
    }

    for (y := 0; y < temp.size.y; y++) {
        row := temp.pixels + y*temp.stride;
        blur_row(scratch, row, temp.size.x, radius);
        blur_row(row, scratch, temp.size.x, radius);
        blur_row(scratch, row, temp.size.x, radius);
        blur_transpose(dest.pixels + y, dest.size.x, scratch, temp.size.x);
    }

    free_image(&temp);
    free(scratch);
}

func blur_to_blend(dest: Image*, src: Image*, radius: float, alpha: float) {
    blur_to(dest, src, radius);

    if (radius != 0 && alpha != 1) {
        for (it := pixel_iter_begin(dest, {}); pixel_iter_next(&it)) {
            *it.pixel = color_lerp(image_sample_linear(src, it.pos), *it.pixel, alpha);
        }
    }
}

func blur_to_copy(img: Image*, radius: float): Image {
    result := make_uninitialised_image_like(img);
    src := image_writable(img);
    dest := image_writable(&result);
    blur_to(&dest, &src, radius);
    return result;
}

func blur_to_copy_blend(img: Image*, radius: float, alpha: float): Image {
    result := make_uninitialised_image_like(img);
    src := image_writable(img);
    dest := image_writable(&result);
    blur_to_blend(&dest, &src, radius, alpha);
    return result;
}

func blur_to_asym(dest: Image*, src: Image*, radius: float2) {
    #assert(dest.size.x == src.size.x);
    #assert(dest.size.y == src.size.y);
    #assert(has_complete_writable_region(dest));

    temp := make_uninitialised_image({src.size.y, src.size.x});
    scratch: Color* = alloc2(src.size, sizeof(Color));

    for (i := 0; i < 3; i++) {
        for (y := 0; y < src.size.y; y++) {
            row_src := src.pixels + y*src.stride;
            blur_row(scratch, row_src, src.size.x, radius.x);
            blur_transpose(temp.pixels + y, temp.size.x, scratch, src.size.x);
        }

        for (y := 0; y < temp.size.y; y++) {
            row := temp.pixels + y*temp.stride;
            blur_row(scratch, row, temp.size.x, radius.y);
            blur_transpose(dest.pixels + y, dest.size.x, scratch, temp.size.x);
        }
    }

    free_image(&temp);
    free(scratch);
}

func diffract_fetch(row: float*, len: int, i: int): float {
    if (i < 0 || i >= len) {
        return {};
    }

    return row[i << 2];
}

func diffract_row(dest: Color*, src: Color*, len: int, inner_radius: float[4], outer_radius: float[4]) {
    for (k := 0; k < 4; k++) {
        #assert(inner_radius[k] > 0);
        #assert(outer_radius[k] > inner_radius[k]);

        src_f32 := ((:float*)src) + k;

        ir := clamp(0, len - 2., inner_radius[k]);
        or := clamp(0, len - 3., outer_radius[k]);

        r := int(ir);
        r2 := int(or);

        a := ir - r;
        a2 := or - r2;

        r_rcp :=  1. / (2 * (or - ir));

        c_sub := diffract_fetch(src_f32, len, r + 1) * a;
        c_acc := diffract_fetch(src_f32, len, r2 + 1) * a2;

        for (i := k; i <= r2; i++) {
            if (i <= r) {
                c_sub += diffract_fetch(src_f32, len, i);
            }
            c_acc += diffract_fetch(src_f32, len, i);
        }

        dest_cursor_a := ((:float*)dest) + k;
        for (i := 0; i < r2 + 1; i++) {
            *dest_cursor_a = (c_acc - c_sub) * r_rcp;
            dest_cursor_a += 4;
            c_acc += lerp(diffract_fetch(src_f32, len, i+r2+1), diffract_fetch(src_f32, len, i+r2+2), a2);
            c_acc -= lerp(diffract_fetch(src_f32, len, i-r2), diffract_fetch(src_f32, len, i-r2-1), a2);
            c_sub += lerp(diffract_fetch(src_f32, len, i+r+1), diffract_fetch(src_f32, len, i+r+2), a);
            c_sub -= lerp(diffract_fetch(src_f32, len, i-r), diffract_fetch(src_f32, len, i-r-1), a);
        }

        dest_cursor_b := ((:float*)(dest + r2 + 1)) + k;
        for (i := r2 + 1; i < len - r2 - 2; i++) {
            *dest_cursor_b = (c_acc - c_sub) * r_rcp;
            dest_cursor_b += 4;
            c_acc += lerp(src_f32[(i+r2+1) * 4], src_f32[(i+r2+2) * 4], a2);
            c_acc -= lerp(src_f32[(i-r2) * 4], src_f32[(i-r2-1) * 4], a2);
            c_sub += lerp(src_f32[(i+r+1) * 4], src_f32[(i+r+2) * 4], a);
            c_sub -= lerp(src_f32[(i-r) * 4], src_f32[(i-r-1) * 4], a);
        }

        dest_cursor_c := ((:float*)(dest + len - r2 - 2)) + k;
        for (i := len - r2 - 2; i < len; i++) {
            *dest_cursor_c = (c_acc - c_sub) * r_rcp;
            dest_cursor_c += 4;
            c_acc += lerp(diffract_fetch(src_f32, len, i+r2+1), diffract_fetch(src_f32, len, i+r2+2), a2);
            c_acc -= lerp(diffract_fetch(src_f32, len, i-r2), diffract_fetch(src_f32, len, i-r2-1), a2);
            c_sub += lerp(diffract_fetch(src_f32, len, i+r+1), diffract_fetch(src_f32, len, i+r+2), a);
            c_sub -= lerp(diffract_fetch(src_f32, len, i-r), diffract_fetch(src_f32, len, i-r-1), a);
        }
        #assert((:Color*)dest_cursor_c - dest == len);
    }
}

const diffraction_iters = 4;
func diffract_blur(img: Image*, scratch: Color*, transpose_scratch: Color*, inner_radius: float[4], outer_radius: float[4]) {
    stride := img.stride;
    size := img.size;
    for (y := 0; y < size.y; y++) {
        row := img.pixels + y*stride;

        if (transpose_scratch) {
            for (i := 0; i < size.x; i++) {
                transpose_scratch[y + i*size.y] = row[i];
            }
        }

        for (i := 0; i < diffraction_iters; i++) {
            diffract_row(scratch, row, size.x, inner_radius, outer_radius);
            diffract_row(row, scratch, size.x, inner_radius, outer_radius);
        }
    }

    if (transpose_scratch) {
        for (x := 0; x < size.x; x++) {
            transpose_row := transpose_scratch + x*size.y;

            for (i := 0; i < diffraction_iters; i++) {
                diffract_row(scratch, transpose_row, size.y, inner_radius, outer_radius);
                diffract_row(transpose_row, scratch, size.y, inner_radius, outer_radius);
            }

            for (i := 0; i < size.y; i++) {
                img.pixels[x + i*stride] = color_add(img.pixels[x + i*stride], transpose_row[i]);
            }
        }
    }
}

func transform_image(src: Image*, inverse_map: Rect, scale: float2): Image {
    size := int2 { int(scale.x * src.size.x), int(scale.y * src.size.y) };
    result := make_image(size);
    result_rect := all_rect(&result);
    ar := float(src.size.x) / float(src.size.y);
    for (it := pixel_iter_begin(&result, {}); pixel_iter_next(&it)) {
        p := rect_to_rect(inverse_map, result_rect, it.pos);
        if (inside_normal_rect(p, ar)) {
            *it.pixel = image_sample_linear(src, p);
        } else {
            #assert(1);
        }
    }

    return result;
}

func bounds_after_transform(img: Image*, transform: float2): float2 {
    r := all_rect(img);
    r.rot = transform;
    a := rect_to_image(img, r, {0,0});
    b := rect_to_image(img, r, {r.size.x,0});
    c := rect_to_image(img, r, {0,1});
    d := rect_to_image(img, r, {r.size.x,1});

    x_min := smin4(a.x, b.x, c.x, d.x);
    x_max := smax4(a.x, b.x, c.x, d.x);
    y_min := smin4(a.y, b.y, c.y, d.y);
    y_max := smax4(a.y, b.y, c.y, d.y);

    x := x_max - x_min;
    y := y_max - y_min;

    return { x, y };
}

func apply_diffraction(img: Image*, inner_radius: Color, outer_radius: Color, transform: float2, scratch: Color*, transpose_scratch: Color*): Image {
    transformed_bounds := bounds_after_transform(img, transform);
    rotation := float2 { 1, 0 };

    target := Image {};
    result := Image {};
    if (is_identity_transform(transform)) {
        target = image_copy(img);

        diffract_blur(&target, scratch, transpose_scratch, &inner_radius.r, &outer_radius.r);

        result = target;
    } else {
        rotation = div2s(transform, magnitude2(transform));
        inverse_rect := all_rect(img);
        inverse_rect.size = { 1. / transformed_bounds.x, 1. / transformed_bounds.y };
        inverse_rect.rot = { rotation.x, -rotation.y };
        target = transform_image(img, inverse_rect, transformed_bounds);

        diffract_blur(&target, scratch, transpose_scratch, &inner_radius.r, &outer_radius.r);

        result = make_uninitialised_image_like(img);
        target_rect := all_rect(&target);
        for (it := pixel_iter_begin(&result, {}); pixel_iter_next(&it)) {
            *it.pixel = image_sample_linear(&target, rect_to_rect(target_rect, inverse_rect, it.pos));
        }
    }

    for (it := pixel_iter_begin(&result, {}); pixel_iter_next(&it)) {
        *it.pixel = color_sub(*it.pixel, image_sample_nearest(img, it.pos));
    }

    free_image(&target);

    return result;
}

enum DiffractionType {
    Diffraction_None,
    Diffraction_Cross,
    Diffraction_CrossOrthoRed,
    Diffraction_Single,

    DiffractionTypeCount
}

struct DiffractionArguments {
    type: DiffractionType;
    inner_radius: Color;
    outer_radius: Color;
    transform: float2;
}

// https://en.wikipedia.org/wiki/Diffraction_spike
//
// Note: this returns the difference between the diffracted image and the
// orignal image; that is, it returns the diffracted part only.
func diffract(img: Image*, args: DiffractionArguments): Image {
    if (args.type == Diffraction_None) {
        return {};
    }

    #assert(has_complete_writable_region(img));
    #assert(!color_is_zero(args.inner_radius));
    #assert(!color_is_zero(args.outer_radius));

    transform := is_identity_transform(args.transform) ? float2 { 1, 0 } : args.transform;
    m := magnitude2(transform);
    working_dim := int2 { int(img.size.x * m * 3 / 2), int(img.size.y * m * 3 / 2) };

    scratch_buf_len := maxi(working_dim.x, working_dim.y);
    transpose_scratch_len := 0;

    if (args.type != Diffraction_Single) {
        transpose_scratch_len = working_dim.x * working_dim.y;
    }

    scratch_buf: Color* = new[(scratch_buf_len + transpose_scratch_len)] undef;
    transpose_scratch := transpose_scratch_len ? (scratch_buf + scratch_buf_len) : 0;

    result := apply_diffraction(img, args.inner_radius, args.outer_radius, transform, scratch_buf, transpose_scratch);

    if (args.type == Diffraction_CrossOrthoRed) {
        ortho := rotate(args.transform, { InvSqrt2, InvSqrt2 });
        layer := apply_diffraction(img, color_mul1(args.inner_radius, .7), color_mul1(args.outer_radius, .7), ortho, scratch_buf, transpose_scratch);

        for (it := pixel_iter_begin(&result, {}); pixel_iter_next(&it)) {
            *it.pixel = color_add(*it.pixel, color_mul(image_sample_nearest(&layer, it.pos), { 1., .7, .25, 1. }));
        }

        free_image(&layer);
    }

    return result;
}

func diffract_tex(tex: Tex*, args: DiffractionArguments): Tex {
    if (args.type == Diffraction_None) {
        return {};
    }

    img := tex_image(tex);
    diff := diffract(&img, args);
    result := make_tex_from_image(&diff);
    return result;
}
