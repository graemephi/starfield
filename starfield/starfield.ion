// TODO
//
// https://images.nasa.gov/details-PIA08653.html
//
// Make diffraction have zero past edge samplers

import libc { ... }
import sdl { ... }
import noir { ... }

#foreign(header = "<sdl_bits.h>")

@foreign
func isnan(f: float): bool;

#foreign(header = "<xmmintrin.h>")

@foreign
func _MM_SET_FLUSH_ZERO_MODE(mask: uint32);

@foreign
var _MM_FLUSH_ZERO_ON: uint32;

var ImageSize: int2 const = { 1500, 500 };

func xrealloc(mem: void*, size: usize): void* {
    result := realloc(mem, size);
    if (!result) {
        printf("Failed to realloc");
        #assert(0);
        exit(1);
    }
    return result;
}

func xmalloc(size: usize): void* {
    result := malloc(size);
    if (!result) {
        printf("Failed to malloc");
        #assert(0);
        exit(1);
    }
    memset(result, 0, size);
    return result;
}

func xcalloc(count: usize, size: usize): void* {
    result := calloc(count, size);
    if (!result) {
        printf("Failed to calloc");
        #assert(0);
        exit(1);
    }
    return result;
}

func is_zero(buf: void const*, len: usize): bool {
    p := (:char const*)buf;
    if (*p) {
        return false;
    }

    return memcmp(p + 1, buf, len - 1) == 0;
}

func is_equal(a: void const*, b: void const*, len: usize): bool {
    return memcmp(a, b, len) == 0;
}

struct BufHeader {
    len: ssize;
    cap: ssize;
    data: uint8[1];
}

func buf_header(buf: void*): BufHeader* {
    return buf ? (:BufHeader*)((:uint8*)buf - offsetof(BufHeader, data)) : 0;
}

func buf_len(buf: void*): ssize {
    return buf ? buf_header(buf).len : 0;
}

func buf_cap(buf: void*): ssize {
    return buf ? buf_header(buf).cap : 0;
}

func buf_free(buf: void*) {
    h := buf_header(buf);
    if (h) {
        free(h);
    }
}

func buf_fit(buf: void**, len: ssize) {
    #assert(buf);
    #assert(len);

    if (!*buf) {
        initial_cap := 32*len;
        alloc_size := len*initial_cap + sizeof(BufHeader);
        header: BufHeader* = xmalloc(alloc_size);
        header.cap = initial_cap;
        header.len = 0;
        *buf = header.data;
    }

    header := buf_header(*buf);

    if (header.len + len >= header.cap) {
        new_cap := header.cap * 2;
        header = xrealloc(header, len*new_cap + sizeof(BufHeader));
        header.cap = new_cap;
        *buf = header.data;
    }
}

func buf_push(buf: void**, data: void*, len: ssize): void* {
    buf_fit(buf, len);
    #assert(*buf);
    header := buf_header(*buf);
    slot := header.data + header.len;
    memcpy(slot, data, len);
    header.len += len;
    #assert(header.len <= header.cap);
    return slot;
}

func buf_pop(buf: void*, len: ssize): void* {
    header := buf_header(buf);
    if (header.len > 0) {
        #assert(header.len >= len);
        result := header.data + (header.len - len);
        header.len -= len;
        return result;
    }

    return 0;
}

func buf_u32_push(buf: uint32**, v: uint32) {
    buf_push((:void**)buf, &v, sizeof(v));
}

func buf_u32_pop(buf: uint32*): uint32 {
    p: uint32* = buf_pop(buf, sizeof(uint32));
    return p ? *p : 0;
}

func hash(p: void*, len: ssize): usize {
    h := 1099511628211u;
    b := (:uint8*)p;
    for (i := 0; i < len; i++) {
        h ^= b[i];
        h *= 0xcbf29ce484222325u;
    }
    return h;
}

func hash_int2(p: int2): usize {
    return hash(&p, sizeof(p));
}

func hash_int2_u32(p: int2): uint32 {
    h := hash_int2(p);
    return uint32((h >> 32) ^ h);
}

struct Color {
    r, g, b, a: float;
}

struct RGB8 {
    b, g, r: uint8;
    padding: uint8;
} #static_assert(sizeof(RGB8) == 4)

struct Tex {
    pixels: Color*;
    size: int2;
    lod_levels: int;
}

struct Rect {
    pos: float2; // center
    size: float2; // width, height
    rot: float2; // cos theta, sin theta
}

func make_tex(size: int2): Tex {
    #assert(is_power_2(size.x));
    #assert(size.x == size.y);
    // Allocate space for lods as well.
    pixels := xcalloc(size.x*size.y*4, sizeof(Color));
    return Tex {
        size = size,
        lod_levels = 1,
        pixels = pixels
    };
}

func free_tex(tex: Tex*) {
    #assert(tex.pixels);
    free(tex.pixels);
    tex.pixels = 0;
    tex.size = { 0, 0 };
}

func make_tex_from_image(img: Image*): Tex {
    tex := make_tex(img.size);
    image_copy_to(&{tex.pixels, tex.size}, img);
    // Note: no mip mapping or premultiplied alpha.
    return tex;
}

func compute_lod_level(dest_size: int2, target_size: float2, src_size: int2): float2 {
    // Todo: don't take into accoutn rotation of the target rect.
    step_x := fabs(src_size.x / (dest_size.x * target_size.x));
    step_y := fabs(src_size.y / (dest_size.y * target_size.y));
    return { max(0, log2(step_x)), max(0, log2(step_y)) };
}

// Axis-aligned anisotropic filtering
func generate_lods(tex: Tex*) {
    #assert(tex.size.x == tex.size.y);
    tex.lod_levels = maxi(1, log2i(tex.size.x) + 1);

    blurry := image_copy(&{tex.pixels, tex.size});

    size := tex.size;
    for (i := 0; i < tex.lod_levels; i++) {
        #assert(size.x >= 1);
        #assert(size.y >= 1);

        if (i > 0) {
            // Square pyramid
            prev_lod := tex_get_lod(tex, { i - 1, i - 1 });
            blurry_subrect := Image { blurry.pixels, prev_lod.size };

            blur_to(&blurry_subrect, &prev_lod, .707);
            lod := tex_get_lod(tex, { i, i });

            for (it := pixel_iter_begin(&lod, {}); pixel_iter_next(&it)) {
                #assert(is_zero(it.pixel, sizeof(Color)));
                *it.pixel = image_sample_linear(&blurry_subrect, it.pos);
                #assert(!color_nan(*it.pixel));
            }
        }

        for (j := i + 1; j < tex.lod_levels; j++) {
            prev_lod := tex_get_lod(tex, { j - 1, i });
            blurry_subrect := Image { blurry.pixels, prev_lod.size };

            blur_horizontal(&blurry_subrect, &prev_lod, 0.5);
            lod := tex_get_lod(tex, { j, i });

            for (it := pixel_iter_begin(&lod, {}); pixel_iter_next(&it)) {
                #assert(is_zero(it.pixel, sizeof(Color)));
                *it.pixel = image_sample_linear(&blurry_subrect, it.pos);
                #assert(!color_nan(*it.pixel));
            }
        }

        for (k := i + 1; k < tex.lod_levels; k++) {
            prev_lod := tex_get_lod(tex, { i, k - 1 });
            blurry_subrect := Image { blurry.pixels, prev_lod.size };

            blur_vertical(&blurry_subrect, &prev_lod, 0.5);
            lod := tex_get_lod(tex, { i, k });

            for (it := pixel_iter_begin(&lod, {}); pixel_iter_next(&it)) {
                #assert(is_zero(it.pixel, sizeof(Color)));
                *it.pixel = image_sample_linear(&blurry_subrect, it.pos);
                #assert(!color_nan(*it.pixel));
            }
        }
    }

    free_image(&blurry);
}

func tex_premultiply_alpha(tex: Tex*) {
    for (it := pixel_iter_begin_tex(tex, {}); pixel_iter_next(&it)) {
        *it.pixel = color_premultiply(*it.pixel);
    }
}

func tex_preprocess(tex: Tex*) {
    tex_premultiply_alpha(tex);
    generate_lods(tex);
}

func tex_poke(tex: Tex*, pos: int2, val: Color) {
    #assert(tex.lod_levels == 1);

    // Todo: assert?
    pos.x = clampi(0, tex.size.x - 1, pos.x);
    pos.y = clampi(0, tex.size.y - 1, pos.y);
    idx := pos.x + tex.size.x*pos.y;

    tex.pixels[idx] = val;
}

func tex_get_lod(tex: Tex*, lod: int2): Image {
    // Pixels are laid out as: Series of decreasing mips
    // Each mip is a square mip, followed by decreasing mips in the x axis, then
    // decreasing mips in the y axis

    if (lod.x < 0) {
        lod.x += tex.lod_levels;
    }

    if (lod.y < 0) {
        lod.y += tex.lod_levels;
    }

    if (lod.x < 0 || lod.x >= tex.lod_levels || lod.y < 0 || lod.y >= tex.lod_levels) {
        return {};
    }

    square_level := mini(lod.x, lod.y);
    square_size := int2 { tex.size.x >> square_level, tex.size.y >> square_level };
    square_area := square_size.x*square_size.y;
    square_lod := Image { tex.pixels + tex.size.x*tex.size.y*4 - square_area*4, square_size };

    lod_size := int2 { tex.size.x >> lod.x, tex.size.y >> lod.y };
    #assert(lod_size.x == square_lod.size.x || lod_size.y == square_lod.size.y);

    // Non-square lod sizes decrease geometrically, 1, 1/2, 1/4, 1/8, so their
    // location is the running sum, (2^n - 1)/2^n * area(lod_square).
    denom_bit := abs(lod.x - lod.y) - 1;
    numer := (1 << denom_bit) - 1;

    pixels := square_lod.pixels;
    if (lod.x > lod.y) {
        pixels += square_area + ((numer*square_area) >> denom_bit);
        #assert(pixels < square_lod.pixels + square_area*2);
    } else if (lod.y > lod.x) {
        pixels += square_area*2 + ((numer*square_area) >> denom_bit);
        #assert(pixels < square_lod.pixels + square_area*4);
    }

    #assert(pixels < tex.pixels + tex.size.x*tex.size.y*4);
    return { pixels, lod_size };
}

func tex_lookup(tex: Tex*, pos: float2): Color {
    // Todo: Make edge behaviour configurable? We only use this for looking up
    // low resolution noise right now...
    return image_sample_linear_edge(&{tex.pixels, tex.size}, pos, Edge_Wrap);
}

func tex_lookup_lod(tex: Tex*, pos: float2, lod: float2): Color {
    // Todo: No point in bilinear sampling when an scale appropriate lod is
    // being used

    result := Color {};
    if (lod.x == lod.y) {
        lodi := float2_to_int2(lod);
        lodf := (float2{ lod.x - lodi.x, lod.x - lodi.x });
        a_lod := tex_get_lod(tex, lodi);
        a := image_sample_linear(&a_lod, pos);
        if (lodf.x > 1e-5) {
            b_lod := tex_get_lod(tex, add2is(lodi, 1));
            b := image_sample_linear(&b_lod, pos);
            return  color_lerp(a, b, lodf.x);
        }

        return a;
    }

    lodi := float2_to_int2(lod);
    lodf := (float2{ lod.x - lodi.x, lod.y - lodi.y });
    a_lod := tex_get_lod(tex, lodi);
    b_lod := tex_get_lod(tex, add2i(lodi, { 1, 0 }));
    c_lod := tex_get_lod(tex, add2i(lodi, { 0, 1 }));
    d_lod := tex_get_lod(tex, add2i(lodi, { 1, 1 }));
    a := image_sample_linear(&a_lod, pos);
    b := image_sample_linear(&b_lod, pos);
    c := image_sample_linear(&c_lod, pos);
    d := image_sample_linear(&d_lod, pos);
    ab := color_lerp(a, b, lodf.x);
    cd := color_lerp(c, d, lodf.x);
    abcd := color_lerp(ab, cd, lodf.y);
    return abcd;
}

func draw_tex(dest: Image*, target: Rect, tex: Tex*) {
    lod := compute_lod_level(dest.size, target.size, tex.size);
    for (it := pixel_iter_begin(dest, target); pixel_iter_next(&it)) {
        rgba := tex_lookup_lod(tex, it.pos, lod);
        *it.pixel = color_blend(*it.pixel, rgba);
    }
}

func draw_tex_multiply(dest: Image*, target: Rect, tex: Tex*, multiply_color: Color) {
    lod := compute_lod_level(dest.size, target.size, tex.size);
    for (it := pixel_iter_begin(dest, target); pixel_iter_next(&it)) {
        rgba := tex_lookup_lod(tex, it.pos, lod);
        if (rgba.a) {
            rgba = color_mul1_rgb(rgba, 1. / rgba.a);
            rgba = color_mul(rgba, multiply_color);
            rgba = color_premultiply(rgba);
        }
        *it.pixel = color_blend(*it.pixel, rgba);
    }
}

func draw_outline(buffer: Color*, size: int2, color: Color) {
    for (i := 0; i < size.x; i++) {
        buffer[i] = color;
        buffer[i + (size.x - 1) * size.y] = color;
    }

    for (i := 0; i < size.y; i++) {
        buffer[i * size.x] = color;
        buffer[i * size.x + (size.x - 1)] = color;
    }
}

func all_rect(): Rect {
    return {
        pos = { 0.5, 0.5 },
        size = { 1, 1 },
        rot = { 1, 0 }
    };
}

func rotation(theta: float): float2 {
    return { cos(theta), sin(theta) };
}

func rotate(v: float2, cos_sin_theta: float2): float2 {
    if (cos_sin_theta.x || cos_sin_theta.y) {
        return float2 {
            v.x * cos_sin_theta.x - v.y * cos_sin_theta.y,
            v.x * cos_sin_theta.y + v.y * cos_sin_theta.x
        };
    }

    return v;
}

func rotate_theta(v: float2, theta: float): float2 {
    return rotate(v, { cos(theta), sin(theta) });
}

func inside_normal_rect(pos: float2): bool {
    return pos.x >= 0 && pos.x < 1
        && pos.y >= 0 && pos.y < 1;
}

func rect_relative(rect: Rect, aspect_ratio: float, abs_pos: float2): float2 {
    abs_pos.x *= aspect_ratio;
    shift_pos := sub2(abs_pos, rect.pos);
    rot_pos := rotate(shift_pos, rect.rot);
    scaled_pos := div2(rot_pos, rect.size);
    result := add2(scaled_pos, { 0.5, 0.5 });
    return result;
}

func rect_absolute(rect: Rect, aspect_ratio: float, rel_pos: float2): float2 {
    centered_pos := sub2(rel_pos, { 0.5, 0.5 });
    scaled_pos := mul2(centered_pos, rect.size);
    rot_pos := rotate(scaled_pos, { rect.rot.x, -rect.rot.y });
    shift_pos := add2(rot_pos, rect.pos);
    shift_pos.x /= aspect_ratio;
    return shift_pos;
}

func gray(c: float): Color {
    return { c, c, c, 1 };
}

func color_lerp(a: Color, b: Color, t: float): Color {
    return Color {
        lerp(a.r, b.r, t),
        lerp(a.g, b.g, t),
        lerp(a.b, b.b, t),
        lerp(a.a, b.a, t),
    };
}

func color_pow(a: Color, p: float): Color {
    return Color {
        pow(a.r, p),
        pow(a.g, p),
        pow(a.b, p),
        pow(a.a, p)
    };
}

func color_add(a: Color, b: Color): Color {
    return Color {
        a.r + b.r,
        a.g + b.g,
        a.b + b.b,
        a.a + b.a
    };
}

func color_sub(a: Color, b: Color): Color {
    return Color {
        a.r - b.r,
        a.g - b.g,
        a.b - b.b,
        a.a - b.a
    };
}

func color_mul(a: Color, b: Color): Color {
    return Color {
        a.r * b.r,
        a.g * b.g,
        a.b * b.b,
        a.a * b.a
    };
}

func color_div(a: Color, b: Color): Color {
    return Color {
        safe_div(a.r, b.r),
        safe_div(a.g, b.g),
        safe_div(a.b, b.b),
        safe_div(a.a, b.a)
    };
}

func color_exp(a: Color): Color {
    return Color {
        exp(a.r),
        exp(a.g),
        exp(a.b),
        exp(a.a)
    };
}

func color_add1(a: Color, b: float): Color {
    return Color {
        a.r + b,
        a.g + b,
        a.b + b,
        a.a + b
    };
}

func color_mul1(a: Color, b: float): Color {
    return Color {
        a.r * b,
        a.g * b,
        a.b * b,
        a.a * b
    };
}

func color_mul1_rgb(a: Color, b: float): Color {
    return Color {
        a.r * b,
        a.g * b,
        a.b * b,
        a.a
    };
}

func color_blend(dest: Color, src: Color): Color {
    return Color {
        src.r + (dest.r * (1. - src.a)),
        src.g + (dest.g * (1. - src.a)),
        src.b + (dest.b * (1. - src.a)),
        src.a + (dest.a * (1. - src.a))
    };
}

func color_nan(c: Color): bool {
    return isnan(c.r) || isnan(c.b) || isnan(c.g) || isnan(c.a);
}

func color_premultiply(c: Color): Color {
    return color_mul1_rgb(c, c.a);
}

func srgb(val: float): float {
    #assert(!isnan(val));
    val = clamp01(val);

    if (val <= 0.0031308) {
        return val * 12.92;
    }

    return 1.055 * pow(val, 1./2.4) - 0.055;
}

func color_to_rgb8(color: Color): RGB8 {
    result := RGB8 {
        r = uint8(srgb(color.r) * 255.),
        g = uint8(srgb(color.g) * 255.),
        b = uint8(srgb(color.b) * 255.),
    };
    return result;
}

// Unique for each image.
var diffraction_rotation: float2 = {};
var more_entropy: usize = 1;

func time_now(): double {
    ticks := SDL_GetPerformanceCounter() - app.time.sdl_start_ticks;
    return double(ticks) / double(app.time.ticks_per_sec);
}

func perlin_gradient(p: int2): float2 {
    // p can be {0, 0}, so we add rather than xor
    push_random_state((:uint32)more_entropy + hash_int2_u32(p));
    result := random_unit_vector2();
    pop_random_state();
    return result;
}

func perlin(p: float2, grid_size: float): float {
    p.x = mod(p.x * grid_size, grid_size);
    p.y = mod(p.y * grid_size, grid_size);

    a := float2_to_int2(p);
    b := float2_to_int2(mod2s(add2(p, {1, 0}), grid_size));
    c := float2_to_int2(mod2s(add2(p, {0, 1}), grid_size));
    d := float2_to_int2(mod2s(add2(p, {1, 1}), grid_size));

    A := perlin_gradient(a);
    B := perlin_gradient(b);
    C := perlin_gradient(c);
    D := perlin_gradient(d);

    pp: float2 = { p.x - int(p.x), p.y - int(p.y) };

    u00 := dot2(A, sub2(pp, {0,0}));
    u10 := dot2(B, sub2(pp, {1,0}));
    u01 := dot2(C, sub2(pp, {0,1}));
    u11 := dot2(D, sub2(pp, {1,1}));

    x := pp.x*pp.x*(3. - 2.*pp.x);
    y := pp.y*pp.y*(3. - 2.*pp.y);

    ab := lerp(u00, u10, x);
    cd := lerp(u01, u11, x);
    abcd := lerp(ab, cd, y);

    return abcd;
}

func perlin_octaves(p: float2, grid_size: float): float {
   return (1 / (.5+.25+.125+.0625)) *
      perlin(p, grid_size) * 0.5
    + perlin(mul2s(p, 1.5), grid_size) * 0.25
    + perlin(mul2s(p, 3.), grid_size) * 0.125
    + perlin(mul2s(p, 4.2), grid_size) * 0.0625;
}

func worley_distance(square: int2, p: float2, poisson_alpha: float): float {
    push_random_state((:uint32)more_entropy + hash_int2_u32(square));

    s := int2_to_float2(square);
    k := random_poisson(poisson_alpha);
    max_distance := 2*Sqrt2;
    result := max_distance;

    if (k > 0) {
        result = distance2(add2(s, { random01(), random01() }), p);
        for (i := 1; i < k; i++) {
            new_point := add2(s, { random01(), random01() });
            d := distance_squared2(new_point, p);
            if (d < result) {
                result = d;
            }
        }
    }

    pop_random_state();
    return result;
}

func worley(p: float2, grid_size: float, poisson_alpha: float): float {
    p = mul2s(p, grid_size);
    pi := float2_to_int2(p);

    result :=            worley_distance(add2i(pi, {-1, -1}), p, poisson_alpha);
    result = min(result, worley_distance(add2i(pi, { 0, -1}), p, poisson_alpha));
    result = min(result, worley_distance(add2i(pi, { 1, -1}), p, poisson_alpha));
    result = min(result, worley_distance(add2i(pi, {-1,  0}), p, poisson_alpha));
    result = min(result, worley_distance(add2i(pi, { 0,  0}), p, poisson_alpha));
    result = min(result, worley_distance(add2i(pi, { 1,  0}), p, poisson_alpha));
    result = min(result, worley_distance(add2i(pi, {-1,  1}), p, poisson_alpha));
    result = min(result, worley_distance(add2i(pi, { 0,  1}), p, poisson_alpha));
    result = min(result, worley_distance(add2i(pi, { 1,  1}), p, poisson_alpha));

    return sqrt(result);
}

func worleyf2(p01: float2, grid_size: float, poisson_alpha: float): float {
    p := mul2s(p01, grid_size);
    pi := float2_to_int2(p);

    f1 := 2*Sqrt2;
    f2 := f1;
    // max_distance := 2*Sqrt2;

    for (i := -1; i <= 1; i++) {
        for (j := -1; j <= 1; j++) {
            pi_ij := add2i(pi, { i, j });
            p_ij := int2_to_float2(pi_ij);
            push_random_state((:uint32)more_entropy + hash_int2_u32(pi_ij));

            k := random_poisson(poisson_alpha);

            for (m := 0; m < k; m++) {
                d := distance_squared2(p, add2(p_ij, { random01(), random01() }));
                if (d < f1) {
                    f2 = f1;
                    f1 = d;
                } else if (d < f2) {
                    f2 = d;
                }
            }

            pop_random_state();
        }
    }
    #assert(f1 <= f2);

    return sqrt(f2);
}

func worley_octaves(p: float2, grid_size: float, poisson_alpha: float): float {
   return (1 / (.5+.25+.125+.0625)) *
      worley(p, grid_size, poisson_alpha) * 0.5
    + worley(mul2s(p, 1.5), grid_size, poisson_alpha) * 0.25
    + worley(mul2s(p, 3.), grid_size, poisson_alpha) * 0.125
    + worley(mul2s(p, 4.2), grid_size, poisson_alpha) * 0.0625;
}

func worleyf2_octaves(p: float2, grid_size: float, poisson_alpha: float): float {
   return (1 / (.5+.25+.125+.0625)) *
      worleyf2(p, grid_size, poisson_alpha) * 0.5
    + worleyf2(mul2s(p, 1.5), grid_size, poisson_alpha) * 0.25
    + worleyf2(mul2s(p, 3.), grid_size, poisson_alpha) * 0.125
    + worleyf2(mul2s(p, 4.2), grid_size, poisson_alpha) * 0.0625;
}

func luminance(c: Color): float {
    // https://en.wikipedia.org/w/index.php?title=Relative_luminance&oldid=817127289
    return 0.2126*c.r + 0.7152*c.g + 0.0722*c.b;
}

func uncharted2duiker(x: float): float {
               // Original values
    a := 0.1;  // 0.15
    b := 0.15; // 0.5
    c := 0.1;
    d := 0.2;
    e := 0.02;
    f := 0.3;
    return ((x*(a*x+c*b)+d*e)/(x*(a*x+b)+d*f))-e/f;
}

func tonemap(img: Image*, color_adjustment: Color, mix: float) {
    b := image_copy(img);

    Lmax := 0.;
    for (it := pixel_iter_begin(&b, {}); pixel_iter_next(&it)) {
        *it.pixel = (*it.pixel);
        lum := luminance(*it.pixel);
        if (lum > srgb(1./255)) {
            it.pixel.a = log(1e-5 + luminance(*it.pixel));
        }
        Lmax = max(Lmax, lum);
    }
    blur_asym(&b, mul2s(int2_to_float2(ImageSize), 0.5));

    adjust := color_adjustment;
    adjust.a = 1. / luminance(color_adjustment);
    adjust = color_premultiply(adjust);

    // note: no normalisation, so sensitive to image size
    Lw := exp(image_sample_linear(&b, {.5, .5}).a);
    a := remap(0, 10000, 6, 1, clamp(0, 10000, Lmax));
    for (it := pixel_iter_begin(img, {}); pixel_iter_next(&it)) {
        *it.pixel = (*it.pixel);
        it.pixel.r = a * (adjust.r * uncharted2duiker(it.pixel.r) / uncharted2duiker(Lw));
        it.pixel.g = a * (adjust.g * uncharted2duiker(it.pixel.g) / uncharted2duiker(Lw));
        it.pixel.b = a * (adjust.b * uncharted2duiker(it.pixel.b) / uncharted2duiker(Lw));
    }
}

func main(argc: int, argv: char**): int {
    if (true) {
        test_iterator();
    }
    _MM_SET_FLUSH_ZERO_MODE(_MM_FLUSH_ZERO_ON);

    app.window.size = ImageSize;
    if (!app_init()) {
        print_and_clear_error();
        return 1;
    }

    printf("Platform: %s\n", app.platform);
    printf("Display: %d x %d, %d Hz, %.2f DPI\n", app.display.size.x, app.display.size.y, app.display.rate, app.display.dpi);

    surface := SDL_GetWindowSurface(app.window.sdl);
    renderer := SDL_CreateSoftwareRenderer(surface);
    #assert(surface.format.format == SDL_PIXELFORMAT_RGB888);
    #assert(surface.format.BitsPerPixel == 32);
    #assert(surface.w == ImageSize.x);
    #assert(surface.h == ImageSize.y);

    starfield_text :="""
✺   　　 　　 ·   ⊹
 *  ⋆ 　　　  ✧  *
  　　　　　　　.  　
 +  *　  　* 　　. 　 ⋆
    　　  +   ✫
""";

    // Ion!!!!
    text_len := strlen(starfield_text);

    random_state = (:uint32)hash(starfield_text, text_len);
    more_entropy = hash(starfield_text + text_len / 2, text_len / 2);

    noise := make_image(ImageSize);
    noise_level := 1 - square(random01());
    for (it := pixel_iter_begin(&noise, {}); pixel_iter_next(&it)) {
        c := Color {
            square(random_normal()) * (noise_level / 4096.),
            square(random_normal()) * (noise_level / 4096.),
            square(random_normal()) * (noise_level / 4096.),
            1
        };
        *it.pixel = c;
    }
    blur(&noise, 0.1);

    diffraction_rotation = random_unit_vector2();

    starfield := create_starfield(starfield_text);

    min_t := 100000.;
    max_t := 0.;
    sum_t := 0.;
    n_t := 0;
    t_reset := time_now();

    image := make_image(ImageSize);
    blurred := make_image(ImageSize);
    blurred2 := make_image(ImageSize);
    while (app_update()) {
        if (app.error) {
            print_and_clear_error();
        }

        if (!n_t || app.mouse.left_button.pressed) {
            t0 := time_now();
            t0f := float(t0);

            image_clear(&image);

            draw_starfield(&image, &starfield);

            diffract(&image, {
                alpha = 0.1,
                radius = 4,
                transform = {}, //diffraction_rotation,
                type = randomn(1, DiffractionTypeCount)
            });

            blur_to(&blurred, &image, randomr(0, 1)); // ~1.33
            blur_to(&blurred2, &image, randomr(0.5,2)); // ~2
            for (it := pixel_iter_begin(&image, {}); pixel_iter_next(&it)) {
                bp := image_fetch(&blurred, it.pixel_pos);
                mbp := color_mul(*it.pixel, bp);
                xbp := color_lerp(bp, mbp, 0.1);

                bp2 := image_fetch(&blurred2, it.pixel_pos);
                mbp2 := color_mul(*it.pixel, bp2);
                xbp2 := color_lerp(bp2, mbp2, .9);
                *it.pixel = color_add(*it.pixel, color_add(xbp, xbp2));
            }

            // tonemap(&image, {
            //     r = clamp_low(.1, 2.3 + random_normal()*0.5),
            //     g = clamp_low(.1, 2 + random_normal()*0.5),
            //     b = clamp_low(.1, 1.9 + random_normal()*0.5),
            // }, square(random01()));

            image_to_rgb8((:RGB8*)surface.pixels, { surface.w, surface.h }, &image);

            t1 := time_now();

            t := float((t1 - t0)*1000);
            min_t = min(t, min_t);
            max_t = max(t, max_t);
            sum_t += t;
            n_t++;

            if (app.mouse.left_button.pressed) {
                // Regen galaxy every time
                init_star_type_really(star_types + 12, true);

                printf("min %.2fms max %.2fms avg %.2fms\n", min_t, max_t, sum_t/n_t);

                free_starfield(&starfield);
                starfield = create_starfield(starfield_text);
                t_reset = t0;
            }
        }

        if (app.mouse.right_button.pressed) {
            tonemap(&image, {
                r = clamp_low(.1, 1 + random_normal()*0.1),
                g = clamp_low(.1, 1 + random_normal()*0.1),
                b = clamp_low(.1, 1 + random_normal()*0.1),
            }, 1 - square(random01()));
            image_to_rgb8((:RGB8*)surface.pixels, { surface.w, surface.h }, &image);
        }

        SDL_UpdateWindowSurface(app.window.sdl);

        fflush(stdout);
        SDL_Delay(10);
    }

    return 0;
}