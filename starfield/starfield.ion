@threadlocal
var scratch: TempAllocator*;

struct PushedAllocator
{
    allocator: Allocator*;
    mark: TempMark;
}

// They're called push and pop but the stack is maintained by the caller
// (i.e. on the call stack).
func push_scratch_allocator(): PushedAllocator {
    old := current_allocator;
    current_allocator = (:Allocator*)scratch;
    mark := temp_begin(scratch);
    result := PushedAllocator { old, mark };
    return result;
}

func pop_scratch_allocator(pa: PushedAllocator) {
    current_allocator = pa.allocator;
    temp_end(scratch, pa.mark);
}

@foreign
func isnan(f: float): bool;

var ImageSize: int2 const = { 500, 500 };

func checked_mul2(a: usize, b: usize): usize {
    // a * b < INT_MAX
    // a < INT_MAX / b
    // INT_MAX because anything that tries to allocate 4GB in this program is out of its mind
    if (b == 0) {
        return 0;
    }
    #assert(a < INT_MAX / b);
    if (a >= INT_MAX / b) {
        printf("Integer overflow on allocation\n");
        exit(1);
    }
    return a*b;
}

func checked_mul3(a: usize, b: usize, c: usize): usize {
    return checked_mul2(checked_mul2(a, b), c);
}

func alloc_zero(size: usize, align: usize): void* {
    mem := alloc(size, align);
    zero(mem, size);
    return mem;
}

func alloc_size(count: usize, size: usize, align: usize): void* {
    return alloc(checked_mul2(count, size), align);
}

func alloc2(dim: int2, bytes_per: usize): void* {
    return alloc(checked_mul3(dim.x, dim.y, bytes_per), sizeof(float4));
}

func alloc2_zero(dim: int2, bytes_per: usize): void* {
    size := checked_mul3(dim.x, dim.y, bytes_per);
    return alloc_zero(size, sizeof(float4));
}

func is_zero(buf: void const*, len: usize): bool {
    p := (:char const*)buf;
    if (*p) {
        return false;
    }

    return cmp(p + 1, buf, len - 1) == 0;
}

func is_equal(a: void const*, b: void const*, len: usize): bool {
    return cmp(a, b, len) == 0;
}

@inline
func KB(kb: ssize): ssize {
    return kb * 1024;
}

@inline
func MB(mb: ssize): ssize {
    return mb * 1024 * 1024;
}

struct Color {
    r: float;
    g: float;
    b: float;
    a: float;
}

struct RGB8 {
    b, g, r: uint8;
    padding: uint8;
} #static_assert(sizeof(RGB8) == 4)

struct Tex {
    pixels: Color*;
    size: int2;
    lod_levels: int;
}

struct Rect {
    pos: float2; // center
    size: float2; // width, height
    rot: float2; // cos theta, sin theta
}

func make_tex(size: int2): Tex {
    #assert(is_power_2(size.x));
    #assert(size.x == size.y);
    // Allocate space for lods as well.
    pixels := alloc2_zero(size, 4*sizeof(Color));
    return Tex {
        size = size,
        lod_levels = 1,
        pixels = pixels
    };
}

func tex_image(tex: Tex*): Image {
    return image_from_pixels(tex.pixels, tex.size);
}

func tex_image_copy(tex: Tex*): Image {
    tex_img := tex_image(tex);
    result := image_copy(&tex_img);
    return result;
}

func free_tex(tex: Tex*) {
    free(tex.pixels);
    tex.pixels = 0;
    tex.size = { 0, 0 };
}

func make_tex_from_image(img: Image*): Tex {
    tex := make_tex(img.size);
    tex_as_img := tex_image(&tex);
    image_copy_to(&tex_as_img, img);
    // Note: no mip mapping or premultiplied alpha.
    return tex;
}

func compute_lod_level(dest_size: int2, target_size: float2, src_size: int2): float2 {
    step_x := abs(src_size.x / (dest_size.x * target_size.x));
    step_y := abs(src_size.y / (dest_size.y * target_size.y));
    return { max(0, log2(step_x)), max(0, log2(step_y)) };
}

// Axis-aligned anisotropic filtering
func generate_lods(tex: Tex*) {
    #assert(tex.size.x == tex.size.y);
    tex.lod_levels = maxi(1, log2i(tex.size.x) + 1);

    as_img := tex_image(tex);
    blurry := image_copy(&as_img);

    size := tex.size;
    for (i := 0; i < tex.lod_levels; i++) {
        #assert(size.x >= 1);
        #assert(size.y >= 1);

        if (i > 0) {
            // Square pyramid
            prev_lod := tex_get_lod(tex, { i - 1, i - 1 });
            blurry_subrect := image_from_pixels(blurry.pixels, prev_lod.size);

            blur_to(&blurry_subrect, &prev_lod, .707);
            lod := tex_get_lod(tex, { i, i });

            for (it := pixel_iter_begin(&lod, {}); pixel_iter_next(&it)) {
                #assert(is_zero(it.pixel, sizeof(Color)));
                *it.pixel = image_sample_linear(&blurry_subrect, it.npos);
                #assert(!color_nan(*it.pixel));
            }
        }

        for (j := i + 1; j < tex.lod_levels; j++) {
            prev_lod := tex_get_lod(tex, { j - 1, i });
            blurry_subrect := image_from_pixels(blurry.pixels, prev_lod.size);

            blur_horizontal(&blurry_subrect, &prev_lod, 0.5);
            lod := tex_get_lod(tex, { j, i });

            for (it := pixel_iter_begin(&lod, {}); pixel_iter_next(&it)) {
                #assert(is_zero(it.pixel, sizeof(Color)));
                *it.pixel = image_sample_linear(&blurry_subrect, it.npos);
                #assert(!color_nan(*it.pixel));
            }
        }

        for (k := i + 1; k < tex.lod_levels; k++) {
            prev_lod := tex_get_lod(tex, { i, k - 1 });
            blurry_subrect := image_from_pixels(blurry.pixels, prev_lod.size);

            blur_vertical(&blurry_subrect, &prev_lod, 0.5);
            lod := tex_get_lod(tex, { i, k });

            for (it := pixel_iter_begin(&lod, {}); pixel_iter_next(&it)) {
                #assert(is_zero(it.pixel, sizeof(Color)));
                *it.pixel = image_sample_linear(&blurry_subrect, it.npos);
                #assert(!color_nan(*it.pixel));
            }
        }
    }

    free_image(&blurry);
}

func tex_premultiply_alpha(tex: Tex*) {
    end := tex.pixels + 4*tex.size.x*tex.size.y;
    for (it := tex.pixels; it != end; it++) {
        *it = color_premultiply(*it);
    }
}

func tex_preprocess(tex: Tex*) {
    if (tex.pixels) {
        generate_lods(tex);
        tex_premultiply_alpha(tex);
    }
}

func tex_poke(tex: Tex*, pos: int2, val: Color) {
    #assert(tex.lod_levels == 1);

    pos.x = clampi(0, tex.size.x - 1, pos.x);
    pos.y = clampi(0, tex.size.y - 1, pos.y);
    idx := pos.x + tex.size.x*pos.y;

    tex.pixels[idx] = val;
}

func tex_write_nearest(tex: Tex*, pos: float2, val: Color) {
    tex_poke(tex, float2_to_int2({ pos.x * (tex.size.x - 1), pos.y * (tex.size.y - 1) }), val);
}

func tex_get_lod(tex: Tex*, lod: int2): Image {
    // Pixels are laid out as a series of decreasing mips
    // Each mip is a square mip, followed by decreasing mips in the x axis, then
    // decreasing mips in the y axis

    if (lod.x < 0) {
        lod.x += tex.lod_levels;
    }

    if (lod.y < 0) {
        lod.y += tex.lod_levels;
    }

    if (lod.x < 0 || lod.x >= tex.lod_levels || lod.y < 0 || lod.y >= tex.lod_levels) {
        return {};
    }

    square_level := mini(lod.x, lod.y);
    square_size := int2 { tex.size.x >> square_level, tex.size.y >> square_level };
    square_area := square_size.x*square_size.y;
    square_lod := Image { tex.pixels + tex.size.x*tex.size.y*4 - square_area*4, square_size };

    lod_size := int2 { tex.size.x >> lod.x, tex.size.y >> lod.y };
    #assert(lod_size.x == square_lod.size.x || lod_size.y == square_lod.size.y);

    // Non-square lod sizes decrease geometrically, 1, 1/2, 1/4, 1/8, so their
    // location is the running sum, (2^n - 1)/2^n * area(lod_square).
    denom_bit := absi(lod.x - lod.y) - 1;
    numer := (1 << denom_bit) - 1;

    pixels := square_lod.pixels;
    if (lod.x > lod.y) {
        pixels += square_area + ((numer*square_area) >> denom_bit);
        #assert(pixels < square_lod.pixels + square_area*2);
    } else if (lod.y > lod.x) {
        pixels += square_area*2 + ((numer*square_area) >> denom_bit);
        #assert(pixels < square_lod.pixels + square_area*4);
    }

    #assert(pixels < tex.pixels + tex.size.x*tex.size.y*4);
    return image_from_pixels(pixels, lod_size);
}

func tex_lookup(tex: Tex*, pos: float2): Color {
    img := tex_image(tex);
    return image_sample_linear_edge(&img, pos, Edge_Repeat);
}

func tex_lookup_lod(tex: Tex*, pos: float2, lod: float2): Color {
    result := Color {};
    if (lod.x == lod.y) {
        lodi := float2_to_int2(lod);
        lodf := (float2{ lod.x - lodi.x, lod.x - lodi.x });
        a_lod := tex_get_lod(tex, lodi);
        a := image_sample_linear(&a_lod, pos);
        if (lodf.x > 1e-5) {
            b_lod := tex_get_lod(tex, add2si(lodi, 1));
            b := image_sample_linear(&b_lod, pos);
            return color_lerp(a, b, lodf.x);
        }

        return a;
    }

    lodi := float2_to_int2(lod);
    lodf := (float2{ lod.x - lodi.x, lod.y - lodi.y });
    a_lod := tex_get_lod(tex, lodi);
    b_lod := tex_get_lod(tex, add2i(lodi, { 1, 0 }));
    c_lod := tex_get_lod(tex, add2i(lodi, { 0, 1 }));
    d_lod := tex_get_lod(tex, add2i(lodi, { 1, 1 }));
    a := image_sample_linear_stretch(&a_lod, pos);
    b := image_sample_linear_stretch(&b_lod, pos);
    c := image_sample_linear_stretch(&c_lod, pos);
    d := image_sample_linear_stretch(&d_lod, pos);
    ab := color_lerp(a, b, lodf.x);
    cd := color_lerp(c, d, lodf.x);
    abcd := color_lerp(ab, cd, lodf.y);
    return abcd;
}

func draw_tex(dest: Image*, target: Rect, tex: Tex*) {
    lod := compute_lod_level(dest.size, target.size, tex.size);
    for (it := pixel_iter_begin(dest, target); pixel_iter_next(&it)) {
        rgba := tex_lookup_lod(tex, it.npos, lod);
        *it.pixel = color_blend(*it.pixel, rgba);
    }
}

func draw_tex_multiply(dest: Image*, target: Rect, tex: Tex*, multiply_color: Color) {
    lod := compute_lod_level(dest.size, target.size, tex.size);
    c := color_premultiply(multiply_color);
    for (it := pixel_iter_begin(dest, target); pixel_iter_next(&it)) {
        rgba := tex_lookup_lod(tex, it.npos, lod);
        *it.pixel = color_blend(*it.pixel, color_mul(rgba, c));
    }
}

func draw_outline(buffer: Color*, size: int2, color: Color) {
    for (i := 0; i < size.x; i++) {
        buffer[i] = color;
        buffer[i + (size.x - 1) * size.y] = color;
    }

    for (i := 0; i < size.y; i++) {
        buffer[i * size.x] = color;
        buffer[i * size.x + (size.x - 1)] = color;
    }
}

func all_rect(img: Image*): Rect {
    if (img.pixels == 0) {
        return {};
    }
    ar := float(img.size.x) / float(img.size.y);
    return {
        pos = { 0.5 * ar, 0.5 },
        size = { ar, 1 },
        rot = { 1, 0 }
    };
}

func rotation(theta: float): float2 {
    return { cos(theta), sin(theta) };
}

func rotate(v: float2, cos_sin_theta: float2): float2 {
    if (cos_sin_theta.x || cos_sin_theta.y) {
        return float2 {
            v.x * cos_sin_theta.x - v.y * cos_sin_theta.y,
            v.x * cos_sin_theta.y + v.y * cos_sin_theta.x
        };
    }

    return v;
}

func is_identity_transform(transform: float2): bool {
    return (transform.x == 0 || transform.x == 1) && (transform.y == 0);
}

func rotate_theta(v: float2, theta: float): float2 {
    return rotate(v, rotation(theta));
}

func is_zero_rect(rect: Rect): bool {
    #assert(!(rect.size.x == 0 && rect.size.y == 0) || (rect.pos.x == 0 && rect.pos.y == 0));
    return rect.size.x == 0 && rect.size.y == 0;
}

func inside_normal_rect(pos: float2, aspect_ratio: float): bool {
    return pos.x >= 0 && pos.x < aspect_ratio
        && pos.y >= 0 && pos.y < 1;
}

func rect_relative(rect: Rect, abs_pos: float2): float2 {
    shift_pos := sub2(abs_pos, rect.pos);
    rot_pos := rotate(shift_pos, rect.rot);
    scaled_pos := div2s(rot_pos, rect.size.y);
    result := add2(scaled_pos, { 0.5 * rect.size.x / rect.size.y, 0.5 });
    return result;
}

func rect_absolute(rect: Rect, rel_pos: float2): float2 {
    centered_pos := sub2(rel_pos, { 0.5 * rect.size.x / rect.size.y, 0.5 });
    scaled_pos := mul2s(centered_pos, rect.size.y);
    rot_pos := rotate(scaled_pos, { rect.rot.x, -rect.rot.y });
    shift_pos := add2(rot_pos, rect.pos);
    return shift_pos;
}

func rect_to_rect(dest: Rect, src: Rect, src_pos: float2): float2 {
    s := rect_absolute(src, src_pos);
    r := rect_relative(dest, s);
    return r;
}

func rect_to_image(dest: Image*, src: Rect, src_pos: float2): float2 {
    return rect_to_rect(all_rect(dest), src, src_pos);
}

func image_to_rect(dest: Rect, src: Image*, src_pos: float2): float2 {
    return rect_to_rect(dest, all_rect(src), src_pos);
}

@inline
func gray(c: float): Color {
    return { c, c, c, 1 };
}

// These tank perf in debug builds :(
@inline
func color_cvt4(f: float4): Color {
    result: Color;
    storeu4((:float*)&result, f);
    return result;
}

@inline
func color_load(c: Color*): float4 {
    return loadu4((:float*)c);
}

@inline
func color_lerp(a: Color, b: Color, t: float): Color {
    return color_cvt4(lerp4s(color_load(&a), color_load(&b), t));
}

@inline
func color_pow(a: Color, p: float): Color {
    return Color {
        pow(a.r, p),
        pow(a.g, p),
        pow(a.b, p),
        pow(a.a, p)
    };
}

@inline
func color_add(a: Color, b: Color): Color {
    return color_cvt4(add4(color_load(&a), color_load(&b)));
}

@inline
func color_sub(a: Color, b: Color): Color {
    return color_cvt4(sub4(color_load(&a), color_load(&b)));
}

@inline
func color_mul(a: Color, b: Color): Color {
    return color_cvt4(mul4(color_load(&a), color_load(&b)));
}

@inline
func color_div(a: Color, b: Color): Color {
    return color_cvt4(div4(color_load(&a), color_load(&b)));
}

@inline
func color_exp(a: Color): Color {
    return Color {
        exp(a.r),
        exp(a.g),
        exp(a.b),
        exp(a.a)
    };
}

@inline
func color_add1(a: Color, b: float): Color {
    return color_cvt4(add4s(color_load(&a), b));
}

@inline
func color_mul1(a: Color, b: float): Color {
    return color_cvt4(mul4s(color_load(&a), b));
}

@inline
func color_mul1_rgb(a: Color, b: float): Color {
    c := color_load(&a);
    v := blend4(mul4(color_load(&a), set4s(b)), c, 0b1000);
    return color_cvt4(v);
}

@inline
func color_blend(dest: Color, src: Color): Color {
    // src + (dest * (1 - src_alpha))
    v := fma4(color_load(&dest), set4s(1 - src.a), color_load(&src));
    return color_cvt4(v);
}

@inline
func color_nan(c: Color): bool {
    return isnan(c.r) || isnan(c.b) || isnan(c.g) || isnan(c.a);
}

@inline
func color_is_zero(c: Color): bool {
    return (c.r == 0) && (c.b == 0) && (c.g == 0) && (c.a == 0);
}

@inline
func color_premultiply(c: Color): Color {
    return color_mul1(c, c.a);
}

@inline
func color_apply_alpha(c: Color, a: float): Color {
    c.a *= a;
    return c;
}

func srgb(val: float): float {
    #assert(!isnan(val));
    val = clamp01(val);

    if (val <= 0.0031308) {
        return val * 12.92;
    }

    return 1.055 * pow(val, 1./2.4) - 0.055;
}

func inverse_srgb(v: float): float {
    if (v <= (0.0031308*12.92)) {
        return v / 12.92;
    }

    return pow((v + 0.055) / 1.055, 2.4);
}

func color_to_rgb8(color: Color): RGB8 {
    result := RGB8 {
        r = uint8(clamp(0, 255, 0.5 + color.r * 255.)),
        g = uint8(clamp(0, 255, 0.5 + color.g * 255.)),
        b = uint8(clamp(0, 255, 0.5 + color.b * 255.)),
    };
    return result;
}

func luminance(c: Color): float {
    // https://en.wikipedia.org/w/index.php?title=Relative_luminance&oldid=817127289
    return 0.2126*c.r + 0.7152*c.g + 0.0722*c.b;
}

func uncharted2duiker(x: float): float {
               // Original values
    a := 0.1;  // 0.15
    b := 0.15; // 0.5
    c := 0.1;
    d := 0.2;
    e := 0.02;
    f := 0.3;
    return ((x*(a*x+c*b)+d*e)/(x*(a*x+b)+d*f))-e/f;
}

func calculate_luminance(img: Image*): float2 {
    b := image_copy(img);
    Lmax := 0.;
    min := srgb(1./255);
    logmin := log(min);
    for (it := pixel_iter_begin(&b, {}); pixel_iter_next(&it)) {
        lum := luminance(*it.pixel);
        if (lum > min) {
            it.pixel.a = log(lum);
        } else {
            it.pixel.a = logmin;
        }
        Lmax = max(Lmax, lum);
    }
    blur_asym(&b, mul2s(int2_to_float2(img.size), 0.5));
    Lw := exp(image_sample_linear(&b, {.5, .5}).a);
    return { Lw, Lmax };
}

// https://web.archive.org/web/20200131193025/http://www.thetenthplanet.de/archives/5367
func dither(v: float, noise: float): float {
    vv := srgb(v);
    a := floor(vv * 255.) / 255.;
    b := a + (1.0 / 255.);
    discr := lerp(inverse_srgb(a), inverse_srgb(b), noise);
    return (discr < v) ? a : b;
}

func nineties(v: float, noise: float): float {
    vv := srgb(sqrt(clamp01(v)));
    a := floor(vv * 127.) / 127.;
    b := a + (1.0 / 127.);
    discr := lerp(inverse_srgb(a), inverse_srgb(b), noise);
    return (discr < v) ? a : b;
}

struct PostProcess {
    small_blur: Image*;
    big_blur: Image*;
    Lw: float;
    Lmax: float;
    color_adjustment: Color;
    nineties: bool;
    grayscale: bool;
}

func post_process(img: Image*, p: PostProcess*) {
    mix := p.color_adjustment.a;
    adjust := color_mul1(p.color_adjustment, 1. / luminance(p.color_adjustment));

    // https://web.archive.org/web/20191118000302/http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/
    alpha0 := 1.61803398874989485;
    alpha1 := 0.75487766624669276;
    alpha2 := 0.569840290998;

    a := remap(0, 10000, 6, 1, clamp(0, 10000, p.Lmax));
    df := color_mul1(adjust, a / uncharted2duiker(p.Lw));
    for (it := pixel_iter_begin(img, {}); pixel_iter_next(&it)) {
        // Layer blurs
        bp := image_sample_nearest(p.small_blur, it.img_pos);
        mbp := color_mul(*it.pixel, bp);
        xbp := color_lerp(bp, mbp, 0.1);

        bp2 := image_sample_nearest(p.big_blur, it.img_pos);
        mbp2 := color_mul(*it.pixel, bp2);
        xbp2 := color_lerp(bp2, mbp2, .9);
        c := color_add(*it.pixel, color_add(xbp, xbp2));

        if (p.grayscale) {
            c = gray(luminance(c));
        }

        // Tonemap
        r := lerp(c.r, df.r * uncharted2duiker(c.r), mix);
        g := lerp(c.g, df.g * uncharted2duiker(c.g), mix);
        b := lerp(c.b, df.b * uncharted2duiker(c.b), mix);

        // Dither
        if (p.nineties) {
            intensity := fract(alpha1*it.wr_pos.x + alpha2*it.wr_pos.y);
            it.pixel.r = nineties(r, intensity);
            intensity = fract(intensity + alpha0);
            it.pixel.g = nineties(g, intensity);
            intensity = fract(intensity + alpha0);
            it.pixel.b = nineties(b, intensity);
        } else {
            intensity := fract(alpha1*it.wr_pos.x + alpha2*it.wr_pos.y);
            it.pixel.r = dither(r, intensity);
            intensity = fract(intensity + alpha0);
            it.pixel.g = dither(g, intensity);
            intensity = fract(intensity + alpha0);
            it.pixel.b = dither(b, intensity);
        }
    }
}

// Unique for each image.
var diffraction_type: DiffractionType = 0;
var diffraction_rotation: float2 = {};

func render_starfield(text: char*, size: int2): Image {
    // 25px apron
    working_size := add2i(size, { 50, 50 });
    block_dim := int2 { 128, 128 };

    text_len := slen(text);
    text_hash := hash(text, text_len);
    random_state ^= (:uint32)text_hash;

    image := make_image(working_size);
    blurred := make_image(working_size);
    blurred2 := make_image(working_size);

    diffraction_type = randomn(0, DiffractionTypeCount);
    diffraction_rotation = random_unit_vector2();

    noise_level := .75 * (1 - square(random01())) / randomr(2048, 4192);
    for (it := pixel_iter_begin(&image, {}); pixel_iter_next(&it)) {
        c := Color {
            square(random_normal()) * (noise_level),
            square(random_normal()) * (noise_level),
            square(random_normal()) * (noise_level),
            square(random_normal()) * (noise_level),
        };
        *it.pixel = c;
    }
    blur(&image, 0.1);

    starfield := Starfield {};

    if (random01() < .02) {
        create_galactic_starfield(&starfield, text, &image);
    } else {
        create_starfield(&starfield, text);
    }

    for (it := image_block_iter_begin(&image, block_dim); image_block_next(&it)) {
        threads_draw_starfield(&threads, it.block, &starfield);
    }

    threads_join(&threads);

    lo_blur := .05*abs(random_normal());
    hi_blur := lo_blur + abs(random_normal_cauchy(.01));
    ufa := lo_blur * .75 * random01();
    ufb := randomr(0, 0.5);
    unfocus: Image = {};
    if (diffraction_type) {
        unfocus = blur_to_copy_blend(&image, ufa, ufb);
    }

    threads_blur_to(&threads, &blurred, &image, lo_blur);
    threads_blur_to(&threads, &blurred2, &image, hi_blur);

    threads_fork(&threads);

    inner_multiplier := abs(random_normal_cauchy(.1));
    outer_multiplier := inner_multiplier + abs(random_normal_cauchy(.4));
    diffract_alpha := clamp01(0.02 * abs(random_normal_cauchy(.1)));

    inner := color_mul1({ 1., 1.1, 1.2, 1.2 }, inner_multiplier);
    outer := color_mul1({ 1., 1.2, 1.4, 1.4 }, outer_multiplier);

    sep := clamp(-1.15, 1.15, random_normal());
    separation := Color { -sep, random01() * randomr(-sep, sep), sep };

    diffracted := diffract(&unfocus, {
        inner_radius = inner,
        outer_radius = outer,
        separation = separation,
        transform = diffraction_rotation,
        type = diffraction_type
    });

    threads_join(&threads);

    draw_star_diffractions(&image, &starfield);

    if (diffraction_type) {
        for (it := pixel_iter_begin(&image, {}); pixel_iter_next(&it)) {
            c := image_sample_nearest(&diffracted, it.pos);
            *it.pixel = color_add(*it.pixel, color_mul1(c, diffract_alpha));
        }
    }

    lum := calculate_luminance(&image);

    color_adjustment := Color {
        clamp_low(.1, 2.3 + random_normal()*0.5),
        clamp_low(.1, 2 + random_normal()*0.5),
        clamp_low(.1, 1.7 + random_normal()*0.6),
        1 - square(random01())
    };

    postprocess_nineties := random01() < 1e-3;
    postprocess_grayscale := postprocess_nineties
        ? (random01() < 0.125)
        : (random01() < 1e-3);

    for (it := image_block_iter_begin(&image, block_dim); image_block_next(&it)) {
        threads_post_process(&threads, it.block, &{
            small_blur = &blurred,
            big_blur = &blurred2,
            Lw = lum.x,
            Lmax = lum.y,
            color_adjustment = color_adjustment,
            nineties = postprocess_nineties,
            grayscale = postprocess_grayscale
        });
    }

    threads_join(&threads);

    wr_img := image;
    wr_img.wr.x0 = (working_size.x - size.x) / 2;
    wr_img.wr.y0 = (working_size.y - size.y) / 2;
    wr_img.wr.x1 = wr_img.wr.x0 + size.x;
    wr_img.wr.y1 = wr_img.wr.y0 + size.y;
    result := image_writable(&wr_img);

    free_starfield(&starfield);

    return result;
}
