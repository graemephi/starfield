// Star types: *+.·˚⊹⋆✦✧✫✹✺

struct StarType {
    id: int32;
    size: float2;
    nonsquare: bool;
    fixed_rotation: bool;
    tex: Tex;
}

enum StarTypes {
    StarType_Space = 0,
    StarType_BigSpace = 13,
    StarTypeCount
}

var star_types: StarType[StarTypeCount] = {};

struct StarsHeader {
    len: int64;
    cap: int64;
    data: Star[1];
}

struct Star {
    rect: Rect;
    type: StarType*;
    color: Color;
}

struct Starfield {
    stars: Star*;
    star_count: int32;
    density: Tex;
}

func free_starfield(starfield: Starfield*) {
    buf_free(starfield.stars);
    if (starfield.density.pixels) {
        free_tex(&starfield.density);
    }
    starfield.stars = 0;
    starfield.star_count = 0;
}

func starfield_len(starfield: Starfield*): int64 {
    h := buf_header(starfield.stars);
    return h ? h.len / sizeof(Star) : 0;
}

func push_star(starfield: Starfield*, star: Star*) {
    buf_push((:void**)&starfield.stars, (:char*)star, sizeof(Star));
}

func consume_star(c: char const*, star: Star*): char const* {
    next := 0;
    if (*c == '\n') {
        c++;
    }

    if (*c == ' ') {
        #static_assert(StarType_Space == 0);
        star.type = star_types + StarType_Space;
        next = 1;
    } else if (*c == '*') {
        star.type = star_types + 1;
        next = 1;
    } else if (*c == '+') {
        star.type = star_types + 2;
        next = 1;
    } else if (*c == '.') {
        star.type = star_types + 3;
        next = 1;
    } else if (memcmp(c, "·", sizeof("·") - 1) == 0) {
        star.type = star_types + 4;
        next = sizeof("·") - 1;
    } else if (memcmp(c, "˚", sizeof("˚") - 1) == 0) {
        star.type = star_types + 5;
        next = sizeof("˚") - 1;
    } else if (memcmp(c, "⊹", sizeof("⊹") - 1) == 0) {
        star.type = star_types + 6;
        next = sizeof("⊹") - 1;
    } else if (memcmp(c, "⋆", sizeof("⋆") - 1) == 0) {
        star.type = star_types + 7;
        next = sizeof("⋆") - 1;
    } else if (memcmp(c, "✦", sizeof("✦") - 1) == 0) {
        star.type = star_types + 8;
        next = sizeof("✦") - 1;
    } else if (memcmp(c, "✧", sizeof("✧") - 1) == 0) {
        star.type = star_types + 9;
        next = sizeof("✧") - 1;
    } else if (memcmp(c, "✫", sizeof("✫") - 1) == 0) {
        star.type = star_types + 10;
        next = sizeof("✫") - 1;
    } else if (memcmp(c, "✹", sizeof("✹") - 1) == 0) {
        star.type = star_types + 11;
        next = sizeof("✹") - 1;
    } else if (memcmp(c, "✺", sizeof("✺") - 1) == 0) {
        star.type = star_types + 12;
        next = sizeof("✺") - 1;
    } else if (memcmp(c, "　", sizeof("　") - 1) == 0) {
        #static_assert(StarType_BigSpace == 13);
        star.type = star_types + StarType_BigSpace;
        next = sizeof("　") - 1;
    } else {
        #assert(0);
        star.type = 0;
        next = 1;
    }

    init_star_type(star.type);
    return c + next;
}

// https://en.wikipedia.org/wiki/File:TernaryColorTmap.PNG
var star_colors: Color[] = {
    { 0xff / 255., 0x01 / 255., 0.,          1. },
    { 0xff / 255., 0x0f / 255., 0.,          1. },
    { 0xff / 255., 0x29 / 255., 0x03 / 255., 1. },
    { 0xff / 255., 0x49 / 255., 0x0d / 255., 1. },
    { 0xff / 255., 0x6a / 255., 0x1f / 255., 1. },
    { 0xff / 255., 0xa6 / 255., 0x59 / 255., 1. },
    { 0xff / 255., 0xc0 / 255., 0x7f / 255., 1. },
    { 0xff / 255., 0xd8 / 255., 0xa8 / 255., 1. },
    { 0xff / 255., 0xed / 255., 0xd3 / 255., 1. },
    { 1,           1,           1,           1. },
    { 0xdb / 255., 0xe9 / 255., 0xff / 255., 1. },
    { 0x8e / 255., 0xb4 / 255., 0xff / 255., 1. },
    { 0x6e / 255., 0x9a / 255., 0xff / 255., 1. },
    { 0x45 / 255., 0x73 / 255., 0xff / 255., 1. },
    { 0x2f / 255., 0x5c / 255., 0xff / 255., 1. },
};
const StarColorCount = (sizeof(star_colors)/sizeof(Color));

func random_random_star_color(range: float2): Color {
    min := range.x;
    max := range.y ? range.y : StarColorCount - 1;

    offset := 8;
    r := offset + random_normal() * (StarColorCount / 7);
    x := clamp(min, max, r);

    xi := int(x);
    xf := x - xi;
    color := color_lerp((star_colors[xi]), (star_colors[xi + 1]), xf);
    return color;
}

func random_star_color(type: StarType*, alpha: float): Color {
    offset := 8;
    r := offset + random_normal() * (StarColorCount / 7);
    x := clamp(0, StarColorCount - 1, r);

    if (type.id == 12) {
        x = clamp(8, 11, x);
    }

    xi := int(x);
    xf := x - xi;
    color := color_lerp((star_colors[xi]), (star_colors[xi + 1]), xf);
    color = color_mul1(color, random01() * (float(xi) / StarColorCount) * alpha);

    return color;
}

func create_starfield(starfield: char const*): Starfield {
    // todo: adjust height based on character, jitter
    result: Starfield = {};

    width := 0;
    height := 0;
    line_width := 0;
    star_count := 0;

    c := starfield;
    while (*c) {
        star: Star;
        c = consume_star(c, &star);

        if (star.type) {
            if (star.type.id == StarType_BigSpace) {
                line_width += 1;
            } else if (star.type.id != StarType_Space) {
                star_count++;

                star.rect.pos = { float(line_width) + random01()*0.5-.25, float(height) + random01()*0.5-.25 };
                x := clamp(0.66, 1.33, square(random_normal()));
                y := x;
                if (star.type.nonsquare) {
                    y = clamp(0.66, 1.33, square(random_normal()));
                }
                star.rect.size = float2 { x, y };
                star.rect.rot = star.type.fixed_rotation ? {} : random_unit_vector2();
                star.color = random_star_color(star.type, 1 + x*x);

                push_star(&result, &star);
            }
        }

        if (*c == '\n') {
            height += 6;
            width = maxi(width, line_width);
            line_width = 0;
            c++;
        } else {
            line_width += 2;
        }
    }

    width += 8;
    height += 4;

    R := maxi(width, height);
    x_pad := 4 + (R - width) / 2;
    y_pad := 4 + (R - height) / 2;

    for (i := 0; i < starfield_len(&result); i++) {
        s := result.stars + i;
        s.rect.pos.x = (s.rect.pos.x + x_pad) / R;
        s.rect.pos.y = (s.rect.pos.y + y_pad) / R;
        s.rect.size.x = s.type.size.x * s.type.tex.size.x * s.rect.size.x / ImageSize.x;
        s.rect.size.y = s.type.size.y * s.type.tex.size.y * s.rect.size.y / ImageSize.y;
    }

    star_count_noise := make_tex({ 8, 8 });
    density := square(random_normal() + 2);
    for (it := pixel_iter_begin_tex(&star_count_noise, {}); pixel_iter_next(&it)) {
        // TODO: Single channel texture!
        it.pixel.r = (:float)random_poisson(clamp_low(0, density + random_normal()));
    }

    tiles := 25;
    w := 1. / tiles;
    background_star_size := 0.005;
    xy := float2 { w / 2., w / 2. };
    for (i := 0; i < tiles; i++) {
        for (j := 0; j < tiles; j++) {
            count := max(1., tex_lookup(&star_count_noise, xy).r);
            for (k := 0; k < count; k++) {
                size := max(1. / ImageSize.x, random_normal()*background_star_size*(1 + count - int(count)));

                push_star(&result, &{
                    rect = {
                        pos = add2(xy, {(random01() - 0.5) * w, (random01() - 0.5) * w}),
                        size = { size, size },
                        rot = random_unit_vector2()
                    },
                    type = star_types + 1,
                    color = random_star_color(star_types + 1, 3*size*(16+4*count))
                });
            }

            xy.x += w;
        }

        xy.x = w / 2;
        xy.y += w;
    }

    result.density = star_count_noise;
    result.star_count = (:int)starfield_len(&result);
    return result;
}


func draw_simple_star(buffer: Color*, size: int2) {
    size.x -= 1;
    size.y -= 1;
    buffer[size.x/2 + size.x*size.y/2] = { 64, 64, 64, 1 };
}

func draw_galaxy(tex: Tex*, arms: int) {
    tex_img := &Image { tex.pixels, tex.size };

    arm_width := 0.0125 + randomr(-1, 1)*0.01;
    arms = clampi(2, 6, arms);
    brightness := randomr(0.8, 1.1);
    arm_definition := randomr(1./arms, 1);
    bar := randomr(.05, .25) / arms;
    spiral_expansion := randomr(1,1.3);
    tilt := random01();

    s := &Starfield {};
    for (i := 0; i < 30000; i++) {
        w := arm_width;
        x := random_normal() / 8;
        y := random_normal() / 8;
        rot := 0.;

        if (arms > 0) {
            x = mod(x + w/2, w) - w/2;

            if (arms & 1) {
                y = fabs(y);
            }

            rot = randomn(0, arms) / float(arms);
            rot += random_normal() * 0.05 * (1 - arm_definition);

            x += (random_normal() / 256) * (1 - arm_definition);
            y += (random_normal() / 256) * (1 - arm_definition);
        }

        // Rotate the arms more towards the edge
        mag := magnitude2({x, y}) + 0.05*random_normal();
        xy := mul2s(normalise2({ x, y }), mag);
        expand := exp(spiral_expansion*(1+mag));
        spin := (random_normal() / 12 + 1)*mag*expand;

        // Bar
        spin *= smoothedge(bar, randomr(.1, .3), mag);

        // Arms
        spin += rot;

        spiral_str := mul2s({ cos(spin * Tau), sin(spin * Tau) }, .5*expand);
        pos := rotate(xy, spiral_str);

        // Fake 3D
        z := (random_normal() * 0.01) * (1 - tilt);
        pos.y *= tilt;
        pos.y += .25 * z;

        // Dim large/bright stars towards the edge
        size := (Sqrt2 - magnitude2(pos) + z + y * tilt) * random01() * 0.016 * brightness;

        push_star(s, &{
            rect = {
                pos = add2s(mul2s(pos, .51), 0.5),
                size = { size, size },
                rot = random_unit_vector2()
            },
            type = star_types + 1,
            color = random_star_color(star_types + 1, 0.66)
        });
    }

    draw_stars(tex_img, s);

    bloom_less := image_copy(tex_img);
    bloom_more := image_copy(tex_img);
    blur(&bloom_less, 3);
    blur(&bloom_more, 20 * tilt);
    bloom_amount := randomr(.4, .8);

    blue := star_colors[StarColorCount - 3];
    yellow := star_colors[5];

    for (it := pixel_iter_begin_tex(tex, {}); pixel_iter_next(&it)) {
        rel := sub2s(it.pos, 0.5);
        th := magnitude2(rel);
        bl := image_sample_linear(&bloom_less, it.pos);
        bm := image_sample_linear(&bloom_more, it.pos);

        center_yellow_str := pow(1 - clamp01(th / (Sqrt2/4)), 6);
        arm_color := color_lerp(blue, yellow, center_yellow_str);
        inter_color := color_mul1_rgb(color_mul(arm_color, bm), perlin_octaves(it.pos, 40) * 0.5 + 1);
        matter := color_mul(bl, arm_color);
        matter = color_mul1_rgb(matter, perlin_octaves(it.pos, 32) * 0.5 + 1);
        matter = color_add(inter_color, matter);
        matter.a = bloom_amount;

        *it.pixel = color_blend(*it.pixel, matter);
    }

    free_starfield(s);
    free_image(&bloom_less);
    free_image(&bloom_more);
}

func draw_lensed_quasar(tex: Tex*) {
    center := div2is(tex.size, 2);

    width := tex.size.x / int(2 + random01() * 8);
    height := tex.size.y / int(2 + random01() * 8);

    top := sub2i(center, { width, 0 });
    right := add2i(center, { 0, height });
    bottom := add2i(center, { width, 0 });
    left := sub2i(center, { 0, height });

    lum := Color { 16., 16., 16., 1. };

    tex.pixels[center.x + tex.size.x*center.y] = { lum.r, lum.g, lum.b * 1.25, lum.a };
    blur(&{ tex.pixels, tex.size }, 2);

    tex_poke(tex, top, lum);
    tex_poke(tex, right, lum);
    tex_poke(tex, bottom, lum);
    tex_poke(tex, left, lum);

    blur(&{ tex.pixels, tex.size }, .25);
    blur(&{ tex.pixels, tex.size }, .25);
}

func init_star_type(type: StarType*) {
    init_star_type_really(type, false);
}

func init_star_type_really(type: StarType*, redraw: bool) {
    idx := (:int32)(type - star_types);
    #assert(idx >= 0);
    #assert(idx < StarTypeCount);

    if (type.tex.pixels && redraw == false) {
        #assert(type.tex.size.x != 0);
        #assert(type.tex.size.y != 0);
        return;
    }

    type.id = idx;

    switch (idx) {
        case 0:
            type.tex = make_tex({ 8, 8 });
            type.size = { 1, 1 };
            draw_outline(type.tex.pixels, type.tex.size, { 0, 1, 0, 0.5 });
        case 1: // *
            type.tex = make_tex({ 32, 32});
            type.size = { 1, 1 };
            draw_simple_star(type.tex.pixels, type.tex.size);
        case 2: // +
            type.tex = make_tex({ 32, 32});
            type.size = { 1, 1 };
            draw_simple_star(type.tex.pixels, type.tex.size);
        case 3: // .
            type.tex = make_tex({ 32, 32 });
            type.size = { 1, 1 };
            draw_simple_star(type.tex.pixels, type.tex.size);
        case 4: // ·
            type.tex = make_tex({ 32, 32 });
            type.size = { 1, 1 };
            draw_simple_star(type.tex.pixels, type.tex.size);
        case 5: // ˚
            type.tex = make_tex({ 64, 64 });
            type.size = { 1, 1 };
            draw_simple_star(type.tex.pixels, type.tex.size);
        case 6: // ⊹
            type.tex = make_tex({ 64,  64 });
            type.size = { .5, .5 };
            draw_lensed_quasar(&type.tex);
        case 7: // ⋆
            type.tex = make_tex({ 64, 64 });
            type.size = { 1, 1 };
            type.fixed_rotation = true;
            draw_simple_star(type.tex.pixels, type.tex.size);
            diffract(&{type.tex.pixels, type.tex.size}, { alpha = 0.2, radius = .5, transform = rotate(diffraction_rotation, { InvSqrt2, InvSqrt2 }) });
            diffract(&{type.tex.pixels, type.tex.size}, { alpha = 0.1, radius = .5, transform = rotate(diffraction_rotation, { cos(Pi/8), sin(Pi/8)}) });
        case 8: // ✦
            type.tex = make_tex({ 64, 64 });
            type.size = { 1, 1 };
            draw_simple_star(type.tex.pixels, type.tex.size);
        case 9: // ✧
            type.tex = make_tex({ 64, 64 });
            type.size = { 1, 1 };
            type.fixed_rotation = true;
            draw_simple_star(type.tex.pixels, type.tex.size);
            diffract(&{type.tex.pixels, type.tex.size}, { 2, 2, diffraction_rotation });
        case 10: // ✫
            type.tex = make_tex({ 128, 128 });
            type.size = { 1, 1 };
            type.fixed_rotation = true;

            type.tex.pixels[((type.tex.size.x)/2 - 1) + ((type.tex.size.y)/2 - 1)*(type.tex.size.x)] = { 64, 16, 1, 1 };
            img := image_copy(&Image { type.tex.pixels, type.tex.size });
            diffract(&img, { 1, 2, rotate(diffraction_rotation, { InvSqrt2, InvSqrt2 }) });
            blur(&img, 0.1);
            for (it := pixel_iter_begin_tex(&type.tex, {}); pixel_iter_next(&it)) {
                c := image_sample_nearest(&img, it.pos);
                str := clamp01(1 - magnitude2(sub2(it.pos, { 0.5, 0.5 })) * 12);
                str = str*str*str*str*str;
                to_white := color_lerp({1, 1, 1, 1}, { 1, 4, 64, 1 }, str);
                *it.pixel = color_add(*it.pixel, color_mul(c, to_white));
            }
        case 11: // ✹
            type.tex = make_tex({ 64, 64 });
            type.size = { 1, 1 };
        case 12: // ✺
            type.tex = make_tex({ 256, 256 });
            type.size = { 1./3., 1./3. };
            type.nonsquare = true;
            draw_galaxy(&type.tex, randomn(1,8));
        case 13: // '　'
            type.tex = make_tex({ 8, 8 });
            type.size = { 1, 1 };
            draw_outline(type.tex.pixels, type.tex.size, { 1, 0, 0, 0.5 });
        default: {
            type.tex = make_tex({ 32, 32});
            type.size = { 1, 1 };
            draw_simple_star(type.tex.pixels, type.tex.size);
        }
    }

    tex_preprocess(&type.tex);
}

func random_warp_one(p: float2, scale: float): float2 {
    a := perlin_gradient(float2_to_int2(add2(p, { 0, 0 })));
    b := perlin_gradient(float2_to_int2(add2(p, { 1, 0 })));
    c := perlin_gradient(float2_to_int2(add2(p, { 0, 1 })));
    d := perlin_gradient(float2_to_int2(add2(p, { 1, 1 })));

    r := float2 { p.x - int(p.x), p.y - int(p.y) };

    x := r.x*r.x*(3. - 2.*r.x);
    y := r.y*r.y*(3. - 2.*r.y);

    ab := lerp2(a, b, x);
    cd := lerp2(c, d, x);
    abcd := lerp2(ab, cd, y);

    return mul2s(abcd, scale);
}

func random_warp(p: float2, freq: float, scale: float): float2 {
    a := 1.;
    b := a*.5;
    c := b*.5;
    d := c*.5;

    q := mul2s(p, freq);
    return add2(p, mul2s(add2(random_warp_one(q, a),
                         add2(random_warp_one(mul2s(q, 2), b),
                         add2(random_warp_one(mul2s(q, 4), c),
                              random_warp_one(mul2s(q, 8), d)))),
                    scale / (a+b+c+d)));
}

func draw_nebula(img: Image*, density: Tex*) {
    nebula := make_image(div2is(img.size, 2));

    c := random_random_star_color({ 0, 4 });
    //  c := Color {1,1,1,1};
    push_random_state((:uint32)more_entropy);
    more_entropy = random();
    pop_random_state();

    turbulence  := randomr(0., 0.2);
    turbulence2 := randomr(turbulence, 0.4);
    detail := random_normal()*2;
    negative_space := (random() & 1) ? 1. : -1.;
    sparsity := randomr(0.3, 0.9);
    fade := random01();

    for (it := pixel_iter_begin(&nebula, {}); pixel_iter_next(&it)) {
        d := tex_lookup(density, it.pos).r * .1;
        p := perlin_octaves(it.pos, 5) * .5 + .5;
        warp_scale := d * turbulence*(1 - p);
        w1 := worley_octaves(random_warp(add2s(it.pos, 1.6939), 4, warp_scale), 5+p*0.2, 2);
        w2 := 2*worley_octaves(random_warp(add2s(it.pos, 3.32849), 6 + 5*turbulence2, warp_scale), 7+p*0.2, 2);
        w3 := 4*worleyf2_octaves(random_warp(add2s(it.pos, 8.22643), 10 + 10*turbulence2, warp_scale), 10 + detail+p*0.2, 2);
        w := w1*w1*w2*w3;
        *it.pixel = color_mul1(c, clamp_low(0, remap(0, 1, 0, w, p)));
    }

    blur_nebula := image_copy(&nebula);
    blur(&blur_nebula, 16);

    for (it := pixel_iter_begin(img, {}); pixel_iter_next(&it)) {
        d := tex_lookup(density, it.pos).r * 0.05;
        n := image_sample_linear(&nebula, it.pos);
        nb := image_sample_linear(&blur_nebula, it.pos);
        nnb := color_mul(n, nb);
        x := color_lerp(nb, nnb, sparsity);
        y := color_add(n, x);
        z := color_pow(y, 2 + d * negative_space);
        z.a *= .333;

        *it.pixel = color_blend(*it.pixel, color_premultiply(z));
    }

    free_image(&nebula);
    free_image(&blur_nebula);
}

func draw_stars(dest: Image*, starfield: Starfield*) {
    for (i := starfield_len(starfield) - 1; i >= 0; i--) {
        star := starfield.stars + i;
        draw_tex_multiply(dest, star.rect, &star.type.tex, star.color);
    }
}

func draw_starfield(dest: Image*, starfield: Starfield*) {
    draw_stars(dest, starfield);
    draw_nebula(dest, &starfield.density);
}